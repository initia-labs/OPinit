// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opinit/ophost/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryBridgeRequest is request type for Query/Bridge RPC method.
type QueryBridgeRequest struct {
	BridgeId uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (m *QueryBridgeRequest) Reset()         { *m = QueryBridgeRequest{} }
func (m *QueryBridgeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeRequest) ProtoMessage()    {}
func (*QueryBridgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{0}
}
func (m *QueryBridgeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeRequest.Merge(m, src)
}
func (m *QueryBridgeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeRequest proto.InternalMessageInfo

// QueryBridgeResponse is response type for the Query/Bridge RPC method
type QueryBridgeResponse struct {
	BridgeId     uint64       `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	BridgeAddr   string       `protobuf:"bytes,2,opt,name=bridge_addr,json=bridgeAddr,proto3" json:"bridge_addr,omitempty"`
	BridgeConfig BridgeConfig `protobuf:"bytes,3,opt,name=bridge_config,json=bridgeConfig,proto3" json:"bridge_config"`
}

func (m *QueryBridgeResponse) Reset()         { *m = QueryBridgeResponse{} }
func (m *QueryBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgeResponse) ProtoMessage()    {}
func (*QueryBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{1}
}
func (m *QueryBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgeResponse.Merge(m, src)
}
func (m *QueryBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgeResponse proto.InternalMessageInfo

func (m *QueryBridgeResponse) GetBridgeId() uint64 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *QueryBridgeResponse) GetBridgeAddr() string {
	if m != nil {
		return m.BridgeAddr
	}
	return ""
}

func (m *QueryBridgeResponse) GetBridgeConfig() BridgeConfig {
	if m != nil {
		return m.BridgeConfig
	}
	return BridgeConfig{}
}

// QueryBridgesRequest is request type for Query/Bridges RPC method.
type QueryBridgesRequest struct {
	// pagination defines the pagination in the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBridgesRequest) Reset()         { *m = QueryBridgesRequest{} }
func (m *QueryBridgesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBridgesRequest) ProtoMessage()    {}
func (*QueryBridgesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{2}
}
func (m *QueryBridgesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgesRequest.Merge(m, src)
}
func (m *QueryBridgesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgesRequest proto.InternalMessageInfo

// QueryBridgesResponse is response type for the Query/Bridges RPC method
type QueryBridgesResponse struct {
	Bridges []QueryBridgeResponse `protobuf:"bytes,1,rep,name=bridges,proto3" json:"bridges"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryBridgesResponse) Reset()         { *m = QueryBridgesResponse{} }
func (m *QueryBridgesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBridgesResponse) ProtoMessage()    {}
func (*QueryBridgesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{3}
}
func (m *QueryBridgesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBridgesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBridgesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBridgesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBridgesResponse.Merge(m, src)
}
func (m *QueryBridgesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBridgesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBridgesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBridgesResponse proto.InternalMessageInfo

func (m *QueryBridgesResponse) GetBridges() []QueryBridgeResponse {
	if m != nil {
		return m.Bridges
	}
	return nil
}

func (m *QueryBridgesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenPairByL1DenomRequest is response type for the Query/TokenPairByL1Denom RPC method
type QueryTokenPairByL1DenomRequest struct {
	BridgeId uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	L1Denom  string `protobuf:"bytes,2,opt,name=l1_denom,json=l1Denom,proto3" json:"l1_denom,omitempty"`
}

func (m *QueryTokenPairByL1DenomRequest) Reset()         { *m = QueryTokenPairByL1DenomRequest{} }
func (m *QueryTokenPairByL1DenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairByL1DenomRequest) ProtoMessage()    {}
func (*QueryTokenPairByL1DenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{4}
}
func (m *QueryTokenPairByL1DenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairByL1DenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairByL1DenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairByL1DenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairByL1DenomRequest.Merge(m, src)
}
func (m *QueryTokenPairByL1DenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairByL1DenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairByL1DenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairByL1DenomRequest proto.InternalMessageInfo

func (m *QueryTokenPairByL1DenomRequest) GetBridgeId() uint64 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *QueryTokenPairByL1DenomRequest) GetL1Denom() string {
	if m != nil {
		return m.L1Denom
	}
	return ""
}

// QueryTokenPairByL1DenomResponse is response type for the Query/TokenPairByL1Denom RPC method
type QueryTokenPairByL1DenomResponse struct {
	TokenPair TokenPair `protobuf:"bytes,1,opt,name=token_pair,json=tokenPair,proto3" json:"token_pair"`
}

func (m *QueryTokenPairByL1DenomResponse) Reset()         { *m = QueryTokenPairByL1DenomResponse{} }
func (m *QueryTokenPairByL1DenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairByL1DenomResponse) ProtoMessage()    {}
func (*QueryTokenPairByL1DenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{5}
}
func (m *QueryTokenPairByL1DenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairByL1DenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairByL1DenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairByL1DenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairByL1DenomResponse.Merge(m, src)
}
func (m *QueryTokenPairByL1DenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairByL1DenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairByL1DenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairByL1DenomResponse proto.InternalMessageInfo

func (m *QueryTokenPairByL1DenomResponse) GetTokenPair() TokenPair {
	if m != nil {
		return m.TokenPair
	}
	return TokenPair{}
}

// QueryTokenPairByL2DenomRequest is response type for the Query/TokenPairByL2Denom RPC method
type QueryTokenPairByL2DenomRequest struct {
	BridgeId uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	L2Denom  string `protobuf:"bytes,2,opt,name=l2_denom,json=l2Denom,proto3" json:"l2_denom,omitempty"`
}

func (m *QueryTokenPairByL2DenomRequest) Reset()         { *m = QueryTokenPairByL2DenomRequest{} }
func (m *QueryTokenPairByL2DenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairByL2DenomRequest) ProtoMessage()    {}
func (*QueryTokenPairByL2DenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{6}
}
func (m *QueryTokenPairByL2DenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairByL2DenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairByL2DenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairByL2DenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairByL2DenomRequest.Merge(m, src)
}
func (m *QueryTokenPairByL2DenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairByL2DenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairByL2DenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairByL2DenomRequest proto.InternalMessageInfo

func (m *QueryTokenPairByL2DenomRequest) GetBridgeId() uint64 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *QueryTokenPairByL2DenomRequest) GetL2Denom() string {
	if m != nil {
		return m.L2Denom
	}
	return ""
}

// QueryTokenPairByL2DenomResponse is response type for the Query/TokenPairByL2Denom RPC method
type QueryTokenPairByL2DenomResponse struct {
	TokenPair TokenPair `protobuf:"bytes,1,opt,name=token_pair,json=tokenPair,proto3" json:"token_pair"`
}

func (m *QueryTokenPairByL2DenomResponse) Reset()         { *m = QueryTokenPairByL2DenomResponse{} }
func (m *QueryTokenPairByL2DenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairByL2DenomResponse) ProtoMessage()    {}
func (*QueryTokenPairByL2DenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{7}
}
func (m *QueryTokenPairByL2DenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairByL2DenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairByL2DenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairByL2DenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairByL2DenomResponse.Merge(m, src)
}
func (m *QueryTokenPairByL2DenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairByL2DenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairByL2DenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairByL2DenomResponse proto.InternalMessageInfo

func (m *QueryTokenPairByL2DenomResponse) GetTokenPair() TokenPair {
	if m != nil {
		return m.TokenPair
	}
	return TokenPair{}
}

// QueryTokenPairsRequest is response type for the Query/TokenPairs RPC method
type QueryTokenPairsRequest struct {
	BridgeId uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	// pagination defines the pagination in the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenPairsRequest) Reset()         { *m = QueryTokenPairsRequest{} }
func (m *QueryTokenPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairsRequest) ProtoMessage()    {}
func (*QueryTokenPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{8}
}
func (m *QueryTokenPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairsRequest.Merge(m, src)
}
func (m *QueryTokenPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairsRequest proto.InternalMessageInfo

func (m *QueryTokenPairsRequest) GetBridgeId() uint64 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *QueryTokenPairsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryTokenPairsResponse is response type for the Query/TokenPairs RPC method
type QueryTokenPairsResponse struct {
	TokenPairs []TokenPair `protobuf:"bytes,1,rep,name=token_pairs,json=tokenPairs,proto3" json:"token_pairs"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryTokenPairsResponse) Reset()         { *m = QueryTokenPairsResponse{} }
func (m *QueryTokenPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenPairsResponse) ProtoMessage()    {}
func (*QueryTokenPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{9}
}
func (m *QueryTokenPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenPairsResponse.Merge(m, src)
}
func (m *QueryTokenPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenPairsResponse proto.InternalMessageInfo

func (m *QueryTokenPairsResponse) GetTokenPairs() []TokenPair {
	if m != nil {
		return m.TokenPairs
	}
	return nil
}

func (m *QueryTokenPairsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLastFinalizedOutputRequest struct {
	BridgeId uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (m *QueryLastFinalizedOutputRequest) Reset()         { *m = QueryLastFinalizedOutputRequest{} }
func (m *QueryLastFinalizedOutputRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastFinalizedOutputRequest) ProtoMessage()    {}
func (*QueryLastFinalizedOutputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{10}
}
func (m *QueryLastFinalizedOutputRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastFinalizedOutputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastFinalizedOutputRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastFinalizedOutputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastFinalizedOutputRequest.Merge(m, src)
}
func (m *QueryLastFinalizedOutputRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastFinalizedOutputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastFinalizedOutputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastFinalizedOutputRequest proto.InternalMessageInfo

func (m *QueryLastFinalizedOutputRequest) GetBridgeId() uint64 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

type QueryLastFinalizedOutputResponse struct {
	OutputProposal Output `protobuf:"bytes,1,opt,name=output_proposal,json=outputProposal,proto3" json:"output_proposal"`
}

func (m *QueryLastFinalizedOutputResponse) Reset()         { *m = QueryLastFinalizedOutputResponse{} }
func (m *QueryLastFinalizedOutputResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastFinalizedOutputResponse) ProtoMessage()    {}
func (*QueryLastFinalizedOutputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{11}
}
func (m *QueryLastFinalizedOutputResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastFinalizedOutputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastFinalizedOutputResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastFinalizedOutputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastFinalizedOutputResponse.Merge(m, src)
}
func (m *QueryLastFinalizedOutputResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastFinalizedOutputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastFinalizedOutputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastFinalizedOutputResponse proto.InternalMessageInfo

func (m *QueryLastFinalizedOutputResponse) GetOutputProposal() Output {
	if m != nil {
		return m.OutputProposal
	}
	return Output{}
}

// QueryOutputProposalRequest is response type for the Query/OutputProposal RPC method
type QueryOutputProposalRequest struct {
	BridgeId    uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	OutputIndex uint64 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (m *QueryOutputProposalRequest) Reset()         { *m = QueryOutputProposalRequest{} }
func (m *QueryOutputProposalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutputProposalRequest) ProtoMessage()    {}
func (*QueryOutputProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{12}
}
func (m *QueryOutputProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutputProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutputProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutputProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutputProposalRequest.Merge(m, src)
}
func (m *QueryOutputProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutputProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutputProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutputProposalRequest proto.InternalMessageInfo

func (m *QueryOutputProposalRequest) GetBridgeId() uint64 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *QueryOutputProposalRequest) GetOutputIndex() uint64 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

// QueryOutputProposalResponse is response type for the Query/OutputProposal RPC method
type QueryOutputProposalResponse struct {
	BridgeId       uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	OutputIndex    uint64 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	OutputProposal Output `protobuf:"bytes,3,opt,name=output_proposal,json=outputProposal,proto3" json:"output_proposal"`
}

func (m *QueryOutputProposalResponse) Reset()         { *m = QueryOutputProposalResponse{} }
func (m *QueryOutputProposalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutputProposalResponse) ProtoMessage()    {}
func (*QueryOutputProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{13}
}
func (m *QueryOutputProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutputProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutputProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutputProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutputProposalResponse.Merge(m, src)
}
func (m *QueryOutputProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutputProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutputProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutputProposalResponse proto.InternalMessageInfo

func (m *QueryOutputProposalResponse) GetBridgeId() uint64 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *QueryOutputProposalResponse) GetOutputIndex() uint64 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

func (m *QueryOutputProposalResponse) GetOutputProposal() Output {
	if m != nil {
		return m.OutputProposal
	}
	return Output{}
}

// QueryOutputProposalsRequest is response type for the Query/OutputProposals RPC method
type QueryOutputProposalsRequest struct {
	BridgeId    uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	OutputIndex uint64 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// pagination defines the pagination in the request.
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOutputProposalsRequest) Reset()         { *m = QueryOutputProposalsRequest{} }
func (m *QueryOutputProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutputProposalsRequest) ProtoMessage()    {}
func (*QueryOutputProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{14}
}
func (m *QueryOutputProposalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutputProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutputProposalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutputProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutputProposalsRequest.Merge(m, src)
}
func (m *QueryOutputProposalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutputProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutputProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutputProposalsRequest proto.InternalMessageInfo

func (m *QueryOutputProposalsRequest) GetBridgeId() uint64 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *QueryOutputProposalsRequest) GetOutputIndex() uint64 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

func (m *QueryOutputProposalsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOutputProposalsResponse is response type for the Query/OutputProposals RPC method
type QueryOutputProposalsResponse struct {
	OutputProposals []QueryOutputProposalResponse `protobuf:"bytes,1,rep,name=output_proposals,json=outputProposals,proto3" json:"output_proposals"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOutputProposalsResponse) Reset()         { *m = QueryOutputProposalsResponse{} }
func (m *QueryOutputProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutputProposalsResponse) ProtoMessage()    {}
func (*QueryOutputProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{15}
}
func (m *QueryOutputProposalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutputProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutputProposalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutputProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutputProposalsResponse.Merge(m, src)
}
func (m *QueryOutputProposalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutputProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutputProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutputProposalsResponse proto.InternalMessageInfo

func (m *QueryOutputProposalsResponse) GetOutputProposals() []QueryOutputProposalResponse {
	if m != nil {
		return m.OutputProposals
	}
	return nil
}

func (m *QueryOutputProposalsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{16}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd525d30e46de74, []int{17}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryBridgeRequest)(nil), "opinit.ophost.v1.QueryBridgeRequest")
	proto.RegisterType((*QueryBridgeResponse)(nil), "opinit.ophost.v1.QueryBridgeResponse")
	proto.RegisterType((*QueryBridgesRequest)(nil), "opinit.ophost.v1.QueryBridgesRequest")
	proto.RegisterType((*QueryBridgesResponse)(nil), "opinit.ophost.v1.QueryBridgesResponse")
	proto.RegisterType((*QueryTokenPairByL1DenomRequest)(nil), "opinit.ophost.v1.QueryTokenPairByL1DenomRequest")
	proto.RegisterType((*QueryTokenPairByL1DenomResponse)(nil), "opinit.ophost.v1.QueryTokenPairByL1DenomResponse")
	proto.RegisterType((*QueryTokenPairByL2DenomRequest)(nil), "opinit.ophost.v1.QueryTokenPairByL2DenomRequest")
	proto.RegisterType((*QueryTokenPairByL2DenomResponse)(nil), "opinit.ophost.v1.QueryTokenPairByL2DenomResponse")
	proto.RegisterType((*QueryTokenPairsRequest)(nil), "opinit.ophost.v1.QueryTokenPairsRequest")
	proto.RegisterType((*QueryTokenPairsResponse)(nil), "opinit.ophost.v1.QueryTokenPairsResponse")
	proto.RegisterType((*QueryLastFinalizedOutputRequest)(nil), "opinit.ophost.v1.QueryLastFinalizedOutputRequest")
	proto.RegisterType((*QueryLastFinalizedOutputResponse)(nil), "opinit.ophost.v1.QueryLastFinalizedOutputResponse")
	proto.RegisterType((*QueryOutputProposalRequest)(nil), "opinit.ophost.v1.QueryOutputProposalRequest")
	proto.RegisterType((*QueryOutputProposalResponse)(nil), "opinit.ophost.v1.QueryOutputProposalResponse")
	proto.RegisterType((*QueryOutputProposalsRequest)(nil), "opinit.ophost.v1.QueryOutputProposalsRequest")
	proto.RegisterType((*QueryOutputProposalsResponse)(nil), "opinit.ophost.v1.QueryOutputProposalsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "opinit.ophost.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "opinit.ophost.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("opinit/ophost/v1/query.proto", fileDescriptor_7dd525d30e46de74) }

var fileDescriptor_7dd525d30e46de74 = []byte{
	// 1063 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x24, 0x25, 0x3f, 0x9e, 0x4b, 0x53, 0xa6, 0x11, 0x38, 0x76, 0xe4, 0x98, 0x15, 0x49,
	0xdc, 0xaa, 0xd9, 0xc1, 0x5b, 0x2e, 0xb4, 0x10, 0x84, 0x81, 0x54, 0xa9, 0x22, 0x62, 0x0c, 0x07,
	0x84, 0x90, 0xac, 0x71, 0x76, 0xbb, 0x59, 0x61, 0xef, 0x6c, 0x3d, 0xeb, 0xa8, 0xa1, 0x44, 0x42,
	0x9c, 0xca, 0x0d, 0x89, 0x7f, 0xa0, 0x1c, 0x90, 0x90, 0xe0, 0x80, 0x10, 0x07, 0x2e, 0x1c, 0x91,
	0x7a, 0xe0, 0x50, 0xc1, 0x85, 0x13, 0x42, 0x09, 0x52, 0xf9, 0x33, 0xd0, 0xee, 0xcc, 0x7a, 0x77,
	0xbd, 0xde, 0x7a, 0x1d, 0xa5, 0x97, 0x28, 0x7e, 0xf3, 0xde, 0xbc, 0xef, 0xfb, 0xde, 0x9b, 0xf7,
	0x6c, 0x58, 0x66, 0x8e, 0x65, 0x5b, 0x2e, 0x61, 0xce, 0x3e, 0xe3, 0x2e, 0x39, 0xa8, 0x91, 0x3b,
	0x7d, 0xa3, 0x77, 0xa8, 0x3a, 0x3d, 0xe6, 0x32, 0x7c, 0x51, 0x9c, 0xaa, 0xe2, 0x54, 0x3d, 0xa8,
	0x15, 0x9f, 0xa3, 0x5d, 0xcb, 0x66, 0xc4, 0xff, 0x2b, 0x9c, 0x8a, 0x57, 0xf6, 0x18, 0xef, 0x32,
	0x4e, 0xda, 0x94, 0x1b, 0x22, 0x9a, 0x1c, 0xd4, 0xda, 0x86, 0x4b, 0x6b, 0xc4, 0xa1, 0xa6, 0x65,
	0x53, 0xd7, 0x62, 0xb6, 0xf4, 0x2d, 0x49, 0xdf, 0xc0, 0x2d, 0x9a, 0xad, 0xb8, 0x24, 0x0e, 0x5b,
	0xfe, 0x27, 0x22, 0x3e, 0xc8, 0xa3, 0x45, 0x93, 0x99, 0x4c, 0xd8, 0xbd, 0xff, 0xa4, 0x75, 0xd9,
	0x64, 0xcc, 0xec, 0x18, 0x84, 0x3a, 0x16, 0xa1, 0xb6, 0xcd, 0x5c, 0x3f, 0x55, 0x10, 0x93, 0xa4,
	0xe6, 0x1e, 0x3a, 0x86, 0x3c, 0x55, 0x6e, 0x00, 0x7e, 0xcf, 0xcb, 0x5d, 0xef, 0x59, 0xba, 0x69,
	0x34, 0x8d, 0x3b, 0x7d, 0x83, 0xbb, 0xb8, 0x04, 0xf3, 0x6d, 0xdf, 0xd0, 0xb2, 0xf4, 0x02, 0xaa,
	0xa0, 0xea, 0xb9, 0xe6, 0x9c, 0x30, 0x6c, 0xeb, 0xd7, 0xe7, 0xee, 0x3f, 0x58, 0xc9, 0xfd, 0xf7,
	0x60, 0x25, 0xa7, 0xfc, 0x8a, 0xe0, 0x52, 0x2c, 0x9a, 0x3b, 0xcc, 0xe6, 0xc6, 0x13, 0xc3, 0xf1,
	0xab, 0x90, 0x97, 0x87, 0x54, 0xd7, 0x7b, 0x85, 0xa9, 0x0a, 0xaa, 0xce, 0xd7, 0x0b, 0x7f, 0xfc,
	0xbc, 0xb1, 0x28, 0xa9, 0xbe, 0xa9, 0xeb, 0x3d, 0x83, 0xf3, 0xf7, 0xdd, 0x9e, 0x65, 0x9b, 0x4d,
	0x10, 0xce, 0x9e, 0x11, 0xbf, 0x0b, 0xcf, 0xca, 0xd0, 0x3d, 0x66, 0xdf, 0xb6, 0xcc, 0xc2, 0x74,
	0x05, 0x55, 0xf3, 0x5a, 0x59, 0x1d, 0xae, 0x8f, 0x2a, 0x00, 0xbd, 0xe5, 0x7b, 0xd5, 0xe7, 0x1f,
	0xfe, 0xbd, 0x92, 0xfb, 0xee, 0xf1, 0x8f, 0x57, 0x50, 0xf3, 0x7c, 0x3b, 0x72, 0xa0, 0x98, 0x31,
	0xf8, 0x3c, 0x60, 0xbf, 0x05, 0x10, 0x56, 0xcc, 0xc7, 0x9f, 0xd7, 0xd6, 0x54, 0x89, 0xce, 0x2b,
	0xaf, 0x2a, 0xca, 0x25, 0xcb, 0xab, 0x36, 0xe8, 0x40, 0xb9, 0x66, 0x24, 0x32, 0x22, 0xd4, 0xf7,
	0x08, 0x16, 0xe3, 0x99, 0xa4, 0x52, 0xb7, 0x60, 0x56, 0x20, 0xe2, 0x05, 0x54, 0x99, 0xae, 0xe6,
	0xb5, 0xd5, 0x24, 0x97, 0x11, 0x0a, 0x47, 0x29, 0x05, 0x17, 0xe0, 0x9b, 0x31, 0xd8, 0x53, 0x3e,
	0xec, 0xf5, 0xb1, 0xb0, 0xc5, 0x85, 0x51, 0xdc, 0xca, 0x87, 0x50, 0xf6, 0x73, 0x7e, 0xc0, 0x3e,
	0x31, 0xec, 0x06, 0xb5, 0x7a, 0xf5, 0xc3, 0x9d, 0xda, 0xdb, 0x86, 0xcd, 0xba, 0x59, 0xfa, 0x03,
	0x2f, 0xc1, 0x5c, 0xa7, 0xd6, 0xd2, 0x3d, 0x7f, 0x51, 0xdd, 0xe6, 0x6c, 0x47, 0x84, 0x2b, 0xfb,
	0xb0, 0x92, 0x7a, 0xb3, 0x54, 0xe4, 0x1d, 0x00, 0xd7, 0x3b, 0x6d, 0x39, 0xd4, 0xea, 0x49, 0xf1,
	0x4b, 0x49, 0x51, 0xc2, 0x1b, 0x22, 0x52, 0xcc, 0xbb, 0x81, 0x75, 0x24, 0x07, 0x6d, 0x32, 0x0e,
	0xda, 0x10, 0x07, 0x2d, 0x9d, 0x83, 0xf6, 0x54, 0x38, 0x1c, 0xc1, 0xf3, 0xf1, 0x4c, 0x3c, 0x13,
	0xf6, 0xad, 0x11, 0x7d, 0x70, 0x8a, 0xf6, 0xf5, 0x9a, 0xf6, 0x85, 0x44, 0x7e, 0xc9, 0xf0, 0x26,
	0xe4, 0x43, 0x86, 0x41, 0xef, 0x66, 0xa5, 0x08, 0x03, 0x8a, 0x67, 0xd8, 0xb4, 0x9b, 0xb2, 0x2c,
	0x3b, 0x94, 0xbb, 0x5b, 0x96, 0x4d, 0x3b, 0xd6, 0xa7, 0x86, 0xbe, 0xdb, 0x77, 0x9d, 0xbe, 0x9b,
	0x45, 0x35, 0xc5, 0x81, 0x4a, 0x7a, 0xbc, 0x64, 0xbd, 0x03, 0x0b, 0xcc, 0xb7, 0x78, 0xb3, 0xd9,
	0x61, 0x9c, 0x76, 0x64, 0x71, 0x0b, 0x49, 0xe6, 0x22, 0x34, 0x4a, 0xfb, 0x82, 0x88, 0x6d, 0xc8,
	0x50, 0xe5, 0x63, 0x28, 0xfa, 0x19, 0x77, 0x63, 0xe6, 0x4c, 0x25, 0x7e, 0x11, 0xce, 0x4b, 0x20,
	0x96, 0xad, 0x1b, 0x77, 0x7d, 0xdd, 0xce, 0x35, 0xf3, 0xc2, 0xb6, 0xed, 0x99, 0xbc, 0xea, 0x95,
	0x46, 0x5e, 0x9f, 0x65, 0x46, 0x8f, 0xbf, 0x7f, 0x94, 0x16, 0xd3, 0xa7, 0xd7, 0xe2, 0xdb, 0xd1,
	0x68, 0xf9, 0x19, 0xa9, 0x31, 0xf4, 0x26, 0xa6, 0x4f, 0xfd, 0x26, 0x7e, 0x47, 0xb0, 0x3c, 0x1a,
	0xa7, 0x94, 0x75, 0x0f, 0x2e, 0x0e, 0xc9, 0x12, 0xbc, 0x8e, 0x8d, 0x94, 0xc9, 0x3e, 0xba, 0x3e,
	0x51, 0xb1, 0x16, 0xe2, 0x62, 0x9d, 0xe1, 0xa3, 0x59, 0x94, 0xdb, 0xbf, 0x41, 0x7b, 0xb4, 0x1b,
	0x88, 0xad, 0x34, 0xe5, 0x5a, 0x0c, 0xac, 0x92, 0xda, 0x0d, 0x98, 0x71, 0x7c, 0x4b, 0x7a, 0xd3,
	0x8b, 0x88, 0x28, 0x76, 0x19, 0xa2, 0x3d, 0xce, 0xc3, 0x33, 0xfe, 0xa5, 0xf8, 0x4b, 0x04, 0x33,
	0x62, 0x9b, 0xe1, 0x97, 0xc6, 0x2c, 0x3b, 0x1f, 0x4e, 0x31, 0xdb, 0x4a, 0x54, 0xb4, 0xfb, 0x5e,
	0xc2, 0x2f, 0xfe, 0xfc, 0xf7, 0xeb, 0xa9, 0x75, 0xbc, 0x4a, 0x12, 0xdf, 0x7a, 0xe4, 0x9a, 0x24,
	0xf7, 0x06, 0x8d, 0x74, 0x84, 0x3f, 0x47, 0x30, 0x2b, 0x57, 0x32, 0x7e, 0x72, 0x9a, 0x40, 0x9c,
	0xe2, 0xda, 0x38, 0x37, 0x09, 0x67, 0x2d, 0x84, 0x53, 0xc2, 0x4b, 0xa9, 0x70, 0xf0, 0x6f, 0x08,
	0x70, 0x72, 0x1d, 0xe2, 0x97, 0x53, 0xd2, 0xa4, 0xee, 0xe4, 0x62, 0x6d, 0x82, 0x08, 0x89, 0xf1,
	0x56, 0x88, 0xf1, 0x0d, 0xfc, 0x7a, 0x26, 0xc9, 0x48, 0x64, 0xec, 0x93, 0xf6, 0x61, 0x2b, 0xd8,
	0xf4, 0x09, 0x1e, 0x5a, 0x76, 0x1e, 0xda, 0xc4, 0x3c, 0xb4, 0xb3, 0xe7, 0x21, 0xb7, 0x3d, 0xfe,
	0x06, 0x01, 0x84, 0x0b, 0x0f, 0x57, 0xc7, 0xa1, 0x19, 0x34, 0xc6, 0xe5, 0x0c, 0x9e, 0x12, 0xef,
	0x66, 0x88, 0xf7, 0x1a, 0xae, 0x4d, 0x8c, 0x17, 0xff, 0x84, 0xe0, 0xd2, 0x88, 0x3d, 0x85, 0xd3,
	0xa4, 0x4b, 0xdf, 0x89, 0x45, 0x6d, 0x92, 0x10, 0x09, 0xff, 0x95, 0x10, 0xfe, 0x65, 0xbc, 0x9e,
	0x84, 0xdf, 0xa1, 0xdc, 0x6d, 0xdd, 0x0e, 0x82, 0x5b, 0x62, 0x7a, 0xe1, 0x5f, 0x10, 0x5c, 0x88,
	0xcf, 0x3a, 0x7c, 0x35, 0xe3, 0x48, 0x14, 0x50, 0x27, 0x1b, 0xa0, 0xca, 0x76, 0x88, 0x72, 0x13,
	0xbf, 0x96, 0x4d, 0x64, 0x01, 0x95, 0x93, 0x7b, 0xd1, 0x7d, 0x72, 0x84, 0x7f, 0x40, 0xb0, 0x30,
	0x34, 0xf0, 0x71, 0x36, 0x34, 0x83, 0xee, 0x50, 0xb3, 0xba, 0x4b, 0xf4, 0xd7, 0x43, 0xf4, 0x04,
	0x6f, 0x4c, 0x84, 0x1e, 0x7f, 0x06, 0x33, 0x62, 0x10, 0xa7, 0x0e, 0xd8, 0xd8, 0xbc, 0x4f, 0x1d,
	0xb0, 0xf1, 0xf9, 0xaf, 0xac, 0x86, 0x90, 0x8a, 0xb8, 0x90, 0x84, 0x24, 0x26, 0x7d, 0x7d, 0xeb,
	0xe1, 0x71, 0x19, 0x3d, 0x3a, 0x2e, 0xa3, 0x7f, 0x8e, 0xcb, 0xe8, 0xab, 0x93, 0x72, 0xee, 0xd1,
	0x49, 0x39, 0xf7, 0xd7, 0x49, 0x39, 0xf7, 0xd1, 0x55, 0xd3, 0x72, 0xf7, 0xfb, 0x6d, 0x75, 0x8f,
	0x75, 0x89, 0x17, 0x6b, 0xd1, 0x8d, 0x0e, 0x6d, 0x73, 0xb2, 0xdb, 0xf0, 0x6f, 0xba, 0x1b, 0xdc,
	0xe5, 0xff, 0x3e, 0x6d, 0xcf, 0xf8, 0x3f, 0x50, 0xaf, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x57,
	0x6c, 0xac, 0xfc, 0x9b, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Bridge queries bridge info.
	Bridge(ctx context.Context, in *QueryBridgeRequest, opts ...grpc.CallOption) (*QueryBridgeResponse, error)
	// Bridges queries bridge infos.
	Bridges(ctx context.Context, in *QueryBridgesRequest, opts ...grpc.CallOption) (*QueryBridgesResponse, error)
	// TokenPairByL1Denom queries token pair by l1 denom.
	TokenPairByL1Denom(ctx context.Context, in *QueryTokenPairByL1DenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByL1DenomResponse, error)
	// TokenPairByL2Denom queries token pair by l2 denom.
	TokenPairByL2Denom(ctx context.Context, in *QueryTokenPairByL2DenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByL2DenomResponse, error)
	// TokenPairs queries all (l1 denom, l2 denom) pair.
	TokenPairs(ctx context.Context, in *QueryTokenPairsRequest, opts ...grpc.CallOption) (*QueryTokenPairsResponse, error)
	LastFinalizedOutput(ctx context.Context, in *QueryLastFinalizedOutputRequest, opts ...grpc.CallOption) (*QueryLastFinalizedOutputResponse, error)
	// OutputProposal queries output proposal by output index.
	OutputProposal(ctx context.Context, in *QueryOutputProposalRequest, opts ...grpc.CallOption) (*QueryOutputProposalResponse, error)
	// OutputProposals queries all output proposals.
	OutputProposals(ctx context.Context, in *QueryOutputProposalsRequest, opts ...grpc.CallOption) (*QueryOutputProposalsResponse, error)
	// Parameters queries the rollup parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Bridge(ctx context.Context, in *QueryBridgeRequest, opts ...grpc.CallOption) (*QueryBridgeResponse, error) {
	out := new(QueryBridgeResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Query/Bridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bridges(ctx context.Context, in *QueryBridgesRequest, opts ...grpc.CallOption) (*QueryBridgesResponse, error) {
	out := new(QueryBridgesResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Query/Bridges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairByL1Denom(ctx context.Context, in *QueryTokenPairByL1DenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByL1DenomResponse, error) {
	out := new(QueryTokenPairByL1DenomResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Query/TokenPairByL1Denom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairByL2Denom(ctx context.Context, in *QueryTokenPairByL2DenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByL2DenomResponse, error) {
	out := new(QueryTokenPairByL2DenomResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Query/TokenPairByL2Denom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairs(ctx context.Context, in *QueryTokenPairsRequest, opts ...grpc.CallOption) (*QueryTokenPairsResponse, error) {
	out := new(QueryTokenPairsResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Query/TokenPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastFinalizedOutput(ctx context.Context, in *QueryLastFinalizedOutputRequest, opts ...grpc.CallOption) (*QueryLastFinalizedOutputResponse, error) {
	out := new(QueryLastFinalizedOutputResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Query/LastFinalizedOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutputProposal(ctx context.Context, in *QueryOutputProposalRequest, opts ...grpc.CallOption) (*QueryOutputProposalResponse, error) {
	out := new(QueryOutputProposalResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Query/OutputProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutputProposals(ctx context.Context, in *QueryOutputProposalsRequest, opts ...grpc.CallOption) (*QueryOutputProposalsResponse, error) {
	out := new(QueryOutputProposalsResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Query/OutputProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Bridge queries bridge info.
	Bridge(context.Context, *QueryBridgeRequest) (*QueryBridgeResponse, error)
	// Bridges queries bridge infos.
	Bridges(context.Context, *QueryBridgesRequest) (*QueryBridgesResponse, error)
	// TokenPairByL1Denom queries token pair by l1 denom.
	TokenPairByL1Denom(context.Context, *QueryTokenPairByL1DenomRequest) (*QueryTokenPairByL1DenomResponse, error)
	// TokenPairByL2Denom queries token pair by l2 denom.
	TokenPairByL2Denom(context.Context, *QueryTokenPairByL2DenomRequest) (*QueryTokenPairByL2DenomResponse, error)
	// TokenPairs queries all (l1 denom, l2 denom) pair.
	TokenPairs(context.Context, *QueryTokenPairsRequest) (*QueryTokenPairsResponse, error)
	LastFinalizedOutput(context.Context, *QueryLastFinalizedOutputRequest) (*QueryLastFinalizedOutputResponse, error)
	// OutputProposal queries output proposal by output index.
	OutputProposal(context.Context, *QueryOutputProposalRequest) (*QueryOutputProposalResponse, error)
	// OutputProposals queries all output proposals.
	OutputProposals(context.Context, *QueryOutputProposalsRequest) (*QueryOutputProposalsResponse, error)
	// Parameters queries the rollup parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Bridge(ctx context.Context, req *QueryBridgeRequest) (*QueryBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bridge not implemented")
}
func (*UnimplementedQueryServer) Bridges(ctx context.Context, req *QueryBridgesRequest) (*QueryBridgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bridges not implemented")
}
func (*UnimplementedQueryServer) TokenPairByL1Denom(ctx context.Context, req *QueryTokenPairByL1DenomRequest) (*QueryTokenPairByL1DenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairByL1Denom not implemented")
}
func (*UnimplementedQueryServer) TokenPairByL2Denom(ctx context.Context, req *QueryTokenPairByL2DenomRequest) (*QueryTokenPairByL2DenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairByL2Denom not implemented")
}
func (*UnimplementedQueryServer) TokenPairs(ctx context.Context, req *QueryTokenPairsRequest) (*QueryTokenPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairs not implemented")
}
func (*UnimplementedQueryServer) LastFinalizedOutput(ctx context.Context, req *QueryLastFinalizedOutputRequest) (*QueryLastFinalizedOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastFinalizedOutput not implemented")
}
func (*UnimplementedQueryServer) OutputProposal(ctx context.Context, req *QueryOutputProposalRequest) (*QueryOutputProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputProposal not implemented")
}
func (*UnimplementedQueryServer) OutputProposals(ctx context.Context, req *QueryOutputProposalsRequest) (*QueryOutputProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputProposals not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Bridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Query/Bridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bridge(ctx, req.(*QueryBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bridges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bridges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Query/Bridges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bridges(ctx, req.(*QueryBridgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairByL1Denom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPairByL1DenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairByL1Denom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Query/TokenPairByL1Denom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairByL1Denom(ctx, req.(*QueryTokenPairByL1DenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairByL2Denom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPairByL2DenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairByL2Denom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Query/TokenPairByL2Denom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairByL2Denom(ctx, req.(*QueryTokenPairByL2DenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Query/TokenPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairs(ctx, req.(*QueryTokenPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastFinalizedOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastFinalizedOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastFinalizedOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Query/LastFinalizedOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastFinalizedOutput(ctx, req.(*QueryLastFinalizedOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutputProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutputProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutputProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Query/OutputProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutputProposal(ctx, req.(*QueryOutputProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutputProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutputProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutputProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Query/OutputProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutputProposals(ctx, req.(*QueryOutputProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opinit.ophost.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bridge",
			Handler:    _Query_Bridge_Handler,
		},
		{
			MethodName: "Bridges",
			Handler:    _Query_Bridges_Handler,
		},
		{
			MethodName: "TokenPairByL1Denom",
			Handler:    _Query_TokenPairByL1Denom_Handler,
		},
		{
			MethodName: "TokenPairByL2Denom",
			Handler:    _Query_TokenPairByL2Denom_Handler,
		},
		{
			MethodName: "TokenPairs",
			Handler:    _Query_TokenPairs_Handler,
		},
		{
			MethodName: "LastFinalizedOutput",
			Handler:    _Query_LastFinalizedOutput_Handler,
		},
		{
			MethodName: "OutputProposal",
			Handler:    _Query_OutputProposal_Handler,
		},
		{
			MethodName: "OutputProposals",
			Handler:    _Query_OutputProposals_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opinit/ophost/v1/query.proto",
}

func (m *QueryBridgeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BridgeConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.BridgeAddr) > 0 {
		i -= len(m.BridgeAddr)
		copy(dAtA[i:], m.BridgeAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BridgeAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.BridgeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBridgesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBridgesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBridgesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bridges) > 0 {
		for iNdEx := len(m.Bridges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bridges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairByL1DenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairByL1DenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairByL1DenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.L1Denom) > 0 {
		i -= len(m.L1Denom)
		copy(dAtA[i:], m.L1Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.L1Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.BridgeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairByL1DenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairByL1DenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairByL1DenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenPair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairByL2DenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairByL2DenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairByL2DenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.L2Denom) > 0 {
		i -= len(m.L2Denom)
		copy(dAtA[i:], m.L2Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.L2Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.BridgeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairByL2DenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairByL2DenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairByL2DenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TokenPair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.BridgeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenPairs) > 0 {
		for iNdEx := len(m.TokenPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastFinalizedOutputRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastFinalizedOutputRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastFinalizedOutputRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastFinalizedOutputResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastFinalizedOutputResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastFinalizedOutputResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutputProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOutputProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutputProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutputProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.BridgeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutputProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutputProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutputProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutputProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.OutputIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.BridgeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutputProposalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutputProposalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutputProposalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OutputIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.BridgeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutputProposalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutputProposalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutputProposalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutputProposals) > 0 {
		for iNdEx := len(m.OutputProposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutputProposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBridgeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovQuery(uint64(m.BridgeId))
	}
	return n
}

func (m *QueryBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovQuery(uint64(m.BridgeId))
	}
	l = len(m.BridgeAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.BridgeConfig.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBridgesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBridgesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bridges) > 0 {
		for _, e := range m.Bridges {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPairByL1DenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovQuery(uint64(m.BridgeId))
	}
	l = len(m.L1Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPairByL1DenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenPair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenPairByL2DenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovQuery(uint64(m.BridgeId))
	}
	l = len(m.L2Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPairByL2DenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenPair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovQuery(uint64(m.BridgeId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenPairs) > 0 {
		for _, e := range m.TokenPairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastFinalizedOutputRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovQuery(uint64(m.BridgeId))
	}
	return n
}

func (m *QueryLastFinalizedOutputResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.OutputProposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOutputProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovQuery(uint64(m.BridgeId))
	}
	if m.OutputIndex != 0 {
		n += 1 + sovQuery(uint64(m.OutputIndex))
	}
	return n
}

func (m *QueryOutputProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovQuery(uint64(m.BridgeId))
	}
	if m.OutputIndex != 0 {
		n += 1 + sovQuery(uint64(m.OutputIndex))
	}
	l = m.OutputProposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOutputProposalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovQuery(uint64(m.BridgeId))
	}
	if m.OutputIndex != 0 {
		n += 1 + sovQuery(uint64(m.OutputIndex))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutputProposalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutputProposals) > 0 {
		for _, e := range m.OutputProposals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBridgeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBridgesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBridgesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBridgesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bridges = append(m.Bridges, QueryBridgeResponse{})
			if err := m.Bridges[len(m.Bridges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairByL1DenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairByL1DenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairByL1DenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L1Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L1Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairByL1DenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairByL1DenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairByL1DenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairByL2DenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairByL2DenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairByL2DenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.L2Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairByL2DenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairByL2DenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairByL2DenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPairs = append(m.TokenPairs, TokenPair{})
			if err := m.TokenPairs[len(m.TokenPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastFinalizedOutputRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastFinalizedOutputRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastFinalizedOutputRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastFinalizedOutputResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastFinalizedOutputResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastFinalizedOutputResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutputProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutputProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutputProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutputProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutputProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutputProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutputProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutputProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutputProposalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutputProposalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutputProposalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutputProposalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutputProposalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutputProposalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputProposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputProposals = append(m.OutputProposals, QueryOutputProposalResponse{})
			if err := m.OutputProposals[len(m.OutputProposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
