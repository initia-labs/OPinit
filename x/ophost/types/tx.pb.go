// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opinit/ophost/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRecordBatch is no_op message, which is only for tx indexing.
type MsgRecordBatch struct {
	Submitter  string `protobuf:"bytes,1,opt,name=submitter,proto3" json:"submitter,omitempty" yaml:"submitter"`
	BridgeId   uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	BatchBytes []byte `protobuf:"bytes,3,opt,name=batch_bytes,json=batchBytes,proto3" json:"batch_bytes,omitempty" yaml:"batch_bytes"`
}

func (m *MsgRecordBatch) Reset()         { *m = MsgRecordBatch{} }
func (m *MsgRecordBatch) String() string { return proto.CompactTextString(m) }
func (*MsgRecordBatch) ProtoMessage()    {}
func (*MsgRecordBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{0}
}
func (m *MsgRecordBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordBatch.Merge(m, src)
}
func (m *MsgRecordBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordBatch proto.InternalMessageInfo

// MsgRecordBatchResponse returns MsgRecordBatch message result data
type MsgRecordBatchResponse struct {
}

func (m *MsgRecordBatchResponse) Reset()         { *m = MsgRecordBatchResponse{} }
func (m *MsgRecordBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRecordBatchResponse) ProtoMessage()    {}
func (*MsgRecordBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{1}
}
func (m *MsgRecordBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRecordBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRecordBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRecordBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRecordBatchResponse.Merge(m, src)
}
func (m *MsgRecordBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRecordBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRecordBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRecordBatchResponse proto.InternalMessageInfo

// MsgCreateBridge is a message to register a new bridge with
// new bridge id.
type MsgCreateBridge struct {
	Creator string       `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty" yaml:"creator"`
	Config  BridgeConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config" yaml:"config"`
}

func (m *MsgCreateBridge) Reset()         { *m = MsgCreateBridge{} }
func (m *MsgCreateBridge) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBridge) ProtoMessage()    {}
func (*MsgCreateBridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{2}
}
func (m *MsgCreateBridge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBridge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBridge.Merge(m, src)
}
func (m *MsgCreateBridge) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBridge) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBridge.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBridge proto.InternalMessageInfo

// MsgCreateBridgeResponse returns MsgCreateBridge message
// result data
type MsgCreateBridgeResponse struct {
	BridgeId uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
}

func (m *MsgCreateBridgeResponse) Reset()         { *m = MsgCreateBridgeResponse{} }
func (m *MsgCreateBridgeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateBridgeResponse) ProtoMessage()    {}
func (*MsgCreateBridgeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{3}
}
func (m *MsgCreateBridgeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateBridgeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateBridgeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateBridgeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateBridgeResponse.Merge(m, src)
}
func (m *MsgCreateBridgeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateBridgeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateBridgeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateBridgeResponse proto.InternalMessageInfo

// MsgProposeOutput is a message to submit l2 block proposal.
type MsgProposeOutput struct {
	Proposer      string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty" yaml:"proposer"`
	BridgeId      uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	OutputIndex   uint64 `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty" yaml:"output_index"`
	L2BlockNumber uint64 `protobuf:"varint,4,opt,name=l2_block_number,json=l2BlockNumber,proto3" json:"l2_block_number,omitempty" yaml:"l2_block_number"`
	OutputRoot    []byte `protobuf:"bytes,5,opt,name=output_root,json=outputRoot,proto3" json:"output_root,omitempty" yaml:"output_root"`
}

func (m *MsgProposeOutput) Reset()         { *m = MsgProposeOutput{} }
func (m *MsgProposeOutput) String() string { return proto.CompactTextString(m) }
func (*MsgProposeOutput) ProtoMessage()    {}
func (*MsgProposeOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{4}
}
func (m *MsgProposeOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeOutput.Merge(m, src)
}
func (m *MsgProposeOutput) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeOutput.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeOutput proto.InternalMessageInfo

// MsgProposeOutputResponse returns deposit result data
type MsgProposeOutputResponse struct {
}

func (m *MsgProposeOutputResponse) Reset()         { *m = MsgProposeOutputResponse{} }
func (m *MsgProposeOutputResponse) String() string { return proto.CompactTextString(m) }
func (*MsgProposeOutputResponse) ProtoMessage()    {}
func (*MsgProposeOutputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{5}
}
func (m *MsgProposeOutputResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgProposeOutputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgProposeOutputResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgProposeOutputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgProposeOutputResponse.Merge(m, src)
}
func (m *MsgProposeOutputResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgProposeOutputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgProposeOutputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgProposeOutputResponse proto.InternalMessageInfo

// MsgDeleteOutput is a message to delete unfinalized l2 output proposals
// in [outputIndex, nextOutputIndex) range.
type MsgDeleteOutput struct {
	Challenger  string `protobuf:"bytes,1,opt,name=challenger,proto3" json:"challenger,omitempty" yaml:"challenger"`
	BridgeId    uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	OutputIndex uint64 `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty" yaml:"output_index"`
}

func (m *MsgDeleteOutput) Reset()         { *m = MsgDeleteOutput{} }
func (m *MsgDeleteOutput) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteOutput) ProtoMessage()    {}
func (*MsgDeleteOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{6}
}
func (m *MsgDeleteOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteOutput.Merge(m, src)
}
func (m *MsgDeleteOutput) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteOutput.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteOutput proto.InternalMessageInfo

// MsgDeleteOutputResponse returns a message handle result.
type MsgDeleteOutputResponse struct {
}

func (m *MsgDeleteOutputResponse) Reset()         { *m = MsgDeleteOutputResponse{} }
func (m *MsgDeleteOutputResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeleteOutputResponse) ProtoMessage()    {}
func (*MsgDeleteOutputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{7}
}
func (m *MsgDeleteOutputResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeleteOutputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeleteOutputResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeleteOutputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeleteOutputResponse.Merge(m, src)
}
func (m *MsgDeleteOutputResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeleteOutputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeleteOutputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeleteOutputResponse proto.InternalMessageInfo

// MsgInitiateTokenDeposit is a message to deposit a new token from L1 to L2.
type MsgInitiateTokenDeposit struct {
	Sender   string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	BridgeId uint64     `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	To       string     `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Amount   types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	Data     []byte     `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty" yaml:"data"`
}

func (m *MsgInitiateTokenDeposit) Reset()         { *m = MsgInitiateTokenDeposit{} }
func (m *MsgInitiateTokenDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateTokenDeposit) ProtoMessage()    {}
func (*MsgInitiateTokenDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{8}
}
func (m *MsgInitiateTokenDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateTokenDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateTokenDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateTokenDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateTokenDeposit.Merge(m, src)
}
func (m *MsgInitiateTokenDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateTokenDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateTokenDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateTokenDeposit proto.InternalMessageInfo

// MsgInitiateTokenDepositResponse returns a message handle result.
type MsgInitiateTokenDepositResponse struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *MsgInitiateTokenDepositResponse) Reset()         { *m = MsgInitiateTokenDepositResponse{} }
func (m *MsgInitiateTokenDepositResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInitiateTokenDepositResponse) ProtoMessage()    {}
func (*MsgInitiateTokenDepositResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{9}
}
func (m *MsgInitiateTokenDepositResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInitiateTokenDepositResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInitiateTokenDepositResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInitiateTokenDepositResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInitiateTokenDepositResponse.Merge(m, src)
}
func (m *MsgInitiateTokenDepositResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInitiateTokenDepositResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInitiateTokenDepositResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInitiateTokenDepositResponse proto.InternalMessageInfo

// MsgFinalizeTokenWithdrawal is a message finalizing funds withdrawal from L2.
type MsgFinalizeTokenWithdrawal struct {
	Sender           string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	BridgeId         uint64     `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	OutputIndex      uint64     `protobuf:"varint,3,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty" yaml:"output_index"`
	WithdrawalProofs [][]byte   `protobuf:"bytes,4,rep,name=withdrawal_proofs,json=withdrawalProofs,proto3" json:"withdrawal_proofs,omitempty"`
	From             string     `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty" yaml:"from"`
	To               string     `protobuf:"bytes,6,opt,name=to,proto3" json:"to,omitempty" yaml:"to"`
	Sequence         uint64     `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty" yaml:"sequence"`
	Amount           types.Coin `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount" yaml:"amount"`
	// version of the output root
	Version       []byte `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty" yaml:"version"`
	StorageRoot   []byte `protobuf:"bytes,10,opt,name=storage_root,json=storageRoot,proto3" json:"storage_root,omitempty" yaml:"storage_root"`
	LastBlockHash []byte `protobuf:"bytes,11,opt,name=last_block_hash,json=lastBlockHash,proto3" json:"last_block_hash,omitempty" yaml:"last_block_hash"`
}

func (m *MsgFinalizeTokenWithdrawal) Reset()         { *m = MsgFinalizeTokenWithdrawal{} }
func (m *MsgFinalizeTokenWithdrawal) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizeTokenWithdrawal) ProtoMessage()    {}
func (*MsgFinalizeTokenWithdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{10}
}
func (m *MsgFinalizeTokenWithdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeTokenWithdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeTokenWithdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeTokenWithdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeTokenWithdrawal.Merge(m, src)
}
func (m *MsgFinalizeTokenWithdrawal) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeTokenWithdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeTokenWithdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeTokenWithdrawal proto.InternalMessageInfo

// MsgFinalizeTokenWithdrawalResponse returns a message handle result.
type MsgFinalizeTokenWithdrawalResponse struct {
}

func (m *MsgFinalizeTokenWithdrawalResponse) Reset()         { *m = MsgFinalizeTokenWithdrawalResponse{} }
func (m *MsgFinalizeTokenWithdrawalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizeTokenWithdrawalResponse) ProtoMessage()    {}
func (*MsgFinalizeTokenWithdrawalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{11}
}
func (m *MsgFinalizeTokenWithdrawalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeTokenWithdrawalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeTokenWithdrawalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeTokenWithdrawalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeTokenWithdrawalResponse.Merge(m, src)
}
func (m *MsgFinalizeTokenWithdrawalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeTokenWithdrawalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeTokenWithdrawalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeTokenWithdrawalResponse proto.InternalMessageInfo

// MsgUpdateProposer is a message to change a proposer
type MsgUpdateProposer struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten)
	// or the current proposer address.
	Authority   string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	BridgeId    uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	NewProposer string `protobuf:"bytes,3,opt,name=new_proposer,json=newProposer,proto3" json:"new_proposer,omitempty" yaml:"new_proposer"`
}

func (m *MsgUpdateProposer) Reset()         { *m = MsgUpdateProposer{} }
func (m *MsgUpdateProposer) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateProposer) ProtoMessage()    {}
func (*MsgUpdateProposer) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{12}
}
func (m *MsgUpdateProposer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateProposer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateProposer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateProposer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateProposer.Merge(m, src)
}
func (m *MsgUpdateProposer) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateProposer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateProposer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateProposer proto.InternalMessageInfo

// MsgUpdateProposerResponse returns a message handle result.
type MsgUpdateProposerResponse struct {
	// last finalized output index
	OutputIndex uint64 `protobuf:"varint,1,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// last finalized l2 block number
	L2BlockNumber uint64 `protobuf:"varint,2,opt,name=l2_block_number,json=l2BlockNumber,proto3" json:"l2_block_number,omitempty"`
}

func (m *MsgUpdateProposerResponse) Reset()         { *m = MsgUpdateProposerResponse{} }
func (m *MsgUpdateProposerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateProposerResponse) ProtoMessage()    {}
func (*MsgUpdateProposerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{13}
}
func (m *MsgUpdateProposerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateProposerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateProposerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateProposerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateProposerResponse.Merge(m, src)
}
func (m *MsgUpdateProposerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateProposerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateProposerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateProposerResponse proto.InternalMessageInfo

// MsgUpdateChallenger is a message to change a challenger
type MsgUpdateChallenger struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten)
	// or the current challenger address.
	//
	// If the given authority is a challenger address, it has the ability to replace itself with another address.
	Authority  string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	BridgeId   uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	Challenger string `protobuf:"bytes,3,opt,name=challenger,proto3" json:"challenger,omitempty" yaml:"challenger"`
}

func (m *MsgUpdateChallenger) Reset()         { *m = MsgUpdateChallenger{} }
func (m *MsgUpdateChallenger) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChallenger) ProtoMessage()    {}
func (*MsgUpdateChallenger) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{14}
}
func (m *MsgUpdateChallenger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChallenger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChallenger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChallenger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChallenger.Merge(m, src)
}
func (m *MsgUpdateChallenger) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChallenger) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChallenger.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChallenger proto.InternalMessageInfo

// MsgUpdateChallengerResponse returns a message handle result.
type MsgUpdateChallengerResponse struct {
	// last finalized output index
	OutputIndex uint64 `protobuf:"varint,1,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// last finalized l2 block number
	L2BlockNumber uint64 `protobuf:"varint,2,opt,name=l2_block_number,json=l2BlockNumber,proto3" json:"l2_block_number,omitempty"`
}

func (m *MsgUpdateChallengerResponse) Reset()         { *m = MsgUpdateChallengerResponse{} }
func (m *MsgUpdateChallengerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChallengerResponse) ProtoMessage()    {}
func (*MsgUpdateChallengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{15}
}
func (m *MsgUpdateChallengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChallengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChallengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChallengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChallengerResponse.Merge(m, src)
}
func (m *MsgUpdateChallengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChallengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChallengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChallengerResponse proto.InternalMessageInfo

// MsgUpdateBatchInfo is a message to change a batch info
type MsgUpdateBatchInfo struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten)
	// or the current proposer address.
	Authority    string    `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	BridgeId     uint64    `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	NewBatchInfo BatchInfo `protobuf:"bytes,3,opt,name=new_batch_info,json=newBatchInfo,proto3" json:"new_batch_info" yaml:"new_batch_info"`
}

func (m *MsgUpdateBatchInfo) Reset()         { *m = MsgUpdateBatchInfo{} }
func (m *MsgUpdateBatchInfo) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBatchInfo) ProtoMessage()    {}
func (*MsgUpdateBatchInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{16}
}
func (m *MsgUpdateBatchInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBatchInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBatchInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBatchInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBatchInfo.Merge(m, src)
}
func (m *MsgUpdateBatchInfo) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBatchInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBatchInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBatchInfo proto.InternalMessageInfo

// MsgUpdateBatchInfoResponse returns a message handle result.
type MsgUpdateBatchInfoResponse struct {
	// last finalized output index
	OutputIndex uint64 `protobuf:"varint,1,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// last finalized l2 block number
	L2BlockNumber uint64 `protobuf:"varint,2,opt,name=l2_block_number,json=l2BlockNumber,proto3" json:"l2_block_number,omitempty"`
}

func (m *MsgUpdateBatchInfoResponse) Reset()         { *m = MsgUpdateBatchInfoResponse{} }
func (m *MsgUpdateBatchInfoResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateBatchInfoResponse) ProtoMessage()    {}
func (*MsgUpdateBatchInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{17}
}
func (m *MsgUpdateBatchInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateBatchInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateBatchInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateBatchInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateBatchInfoResponse.Merge(m, src)
}
func (m *MsgUpdateBatchInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateBatchInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateBatchInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateBatchInfoResponse proto.InternalMessageInfo

// MsgUpdateOracleFlag is a message to change oracle config
type MsgUpdateOracleConfig struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten)
	// or the current proposer address.
	Authority     string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	BridgeId      uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	OracleEnabled bool   `protobuf:"varint,3,opt,name=oracle_enabled,json=oracleEnabled,proto3" json:"oracle_enabled,omitempty" yaml:"oracle_enabled"`
}

func (m *MsgUpdateOracleConfig) Reset()         { *m = MsgUpdateOracleConfig{} }
func (m *MsgUpdateOracleConfig) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOracleConfig) ProtoMessage()    {}
func (*MsgUpdateOracleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{18}
}
func (m *MsgUpdateOracleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOracleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOracleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOracleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOracleConfig.Merge(m, src)
}
func (m *MsgUpdateOracleConfig) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOracleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOracleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOracleConfig proto.InternalMessageInfo

// MsgUpdateOracleFlagResponse returns a message handle result.
type MsgUpdateOracleConfigResponse struct {
}

func (m *MsgUpdateOracleConfigResponse) Reset()         { *m = MsgUpdateOracleConfigResponse{} }
func (m *MsgUpdateOracleConfigResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOracleConfigResponse) ProtoMessage()    {}
func (*MsgUpdateOracleConfigResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{19}
}
func (m *MsgUpdateOracleConfigResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOracleConfigResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOracleConfigResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOracleConfigResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOracleConfigResponse.Merge(m, src)
}
func (m *MsgUpdateOracleConfigResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOracleConfigResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOracleConfigResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOracleConfigResponse proto.InternalMessageInfo

// MsgUpdateMetadata is a message to change metadata
type MsgUpdateMetadata struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten)
	// or the current challenger address.
	//
	// If the given authority is a challenger address, it has the ability to replace oneself to another address or remove
	// oneself.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	BridgeId  uint64 `protobuf:"varint,2,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty" yaml:"bridge_id"`
	Metadata  []byte `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty" yaml:"metadata"`
}

func (m *MsgUpdateMetadata) Reset()         { *m = MsgUpdateMetadata{} }
func (m *MsgUpdateMetadata) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMetadata) ProtoMessage()    {}
func (*MsgUpdateMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{20}
}
func (m *MsgUpdateMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMetadata.Merge(m, src)
}
func (m *MsgUpdateMetadata) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMetadata proto.InternalMessageInfo

// MsgUpdateMetadataResponse returns a message handle result.
type MsgUpdateMetadataResponse struct {
	// last finalized output index
	OutputIndex uint64 `protobuf:"varint,1,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// last finalized l2 block number
	L2BlockNumber uint64 `protobuf:"varint,2,opt,name=l2_block_number,json=l2BlockNumber,proto3" json:"l2_block_number,omitempty"`
}

func (m *MsgUpdateMetadataResponse) Reset()         { *m = MsgUpdateMetadataResponse{} }
func (m *MsgUpdateMetadataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMetadataResponse) ProtoMessage()    {}
func (*MsgUpdateMetadataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{21}
}
func (m *MsgUpdateMetadataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMetadataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMetadataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMetadataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMetadataResponse.Merge(m, src)
}
func (m *MsgUpdateMetadataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMetadataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMetadataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMetadataResponse proto.InternalMessageInfo

// MsgUpdateParams is a message to update parameters
type MsgUpdateParams struct {
	// authority is the address that controls the module
	// (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	// params are the arbitrary parameters to be updated.
	Params *Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty" yaml:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{22}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

// MsgUpdateParamsResponse returns a message handle result.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d16af6eaf4088d05, []int{23}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRecordBatch)(nil), "opinit.ophost.v1.MsgRecordBatch")
	proto.RegisterType((*MsgRecordBatchResponse)(nil), "opinit.ophost.v1.MsgRecordBatchResponse")
	proto.RegisterType((*MsgCreateBridge)(nil), "opinit.ophost.v1.MsgCreateBridge")
	proto.RegisterType((*MsgCreateBridgeResponse)(nil), "opinit.ophost.v1.MsgCreateBridgeResponse")
	proto.RegisterType((*MsgProposeOutput)(nil), "opinit.ophost.v1.MsgProposeOutput")
	proto.RegisterType((*MsgProposeOutputResponse)(nil), "opinit.ophost.v1.MsgProposeOutputResponse")
	proto.RegisterType((*MsgDeleteOutput)(nil), "opinit.ophost.v1.MsgDeleteOutput")
	proto.RegisterType((*MsgDeleteOutputResponse)(nil), "opinit.ophost.v1.MsgDeleteOutputResponse")
	proto.RegisterType((*MsgInitiateTokenDeposit)(nil), "opinit.ophost.v1.MsgInitiateTokenDeposit")
	proto.RegisterType((*MsgInitiateTokenDepositResponse)(nil), "opinit.ophost.v1.MsgInitiateTokenDepositResponse")
	proto.RegisterType((*MsgFinalizeTokenWithdrawal)(nil), "opinit.ophost.v1.MsgFinalizeTokenWithdrawal")
	proto.RegisterType((*MsgFinalizeTokenWithdrawalResponse)(nil), "opinit.ophost.v1.MsgFinalizeTokenWithdrawalResponse")
	proto.RegisterType((*MsgUpdateProposer)(nil), "opinit.ophost.v1.MsgUpdateProposer")
	proto.RegisterType((*MsgUpdateProposerResponse)(nil), "opinit.ophost.v1.MsgUpdateProposerResponse")
	proto.RegisterType((*MsgUpdateChallenger)(nil), "opinit.ophost.v1.MsgUpdateChallenger")
	proto.RegisterType((*MsgUpdateChallengerResponse)(nil), "opinit.ophost.v1.MsgUpdateChallengerResponse")
	proto.RegisterType((*MsgUpdateBatchInfo)(nil), "opinit.ophost.v1.MsgUpdateBatchInfo")
	proto.RegisterType((*MsgUpdateBatchInfoResponse)(nil), "opinit.ophost.v1.MsgUpdateBatchInfoResponse")
	proto.RegisterType((*MsgUpdateOracleConfig)(nil), "opinit.ophost.v1.MsgUpdateOracleConfig")
	proto.RegisterType((*MsgUpdateOracleConfigResponse)(nil), "opinit.ophost.v1.MsgUpdateOracleConfigResponse")
	proto.RegisterType((*MsgUpdateMetadata)(nil), "opinit.ophost.v1.MsgUpdateMetadata")
	proto.RegisterType((*MsgUpdateMetadataResponse)(nil), "opinit.ophost.v1.MsgUpdateMetadataResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "opinit.ophost.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "opinit.ophost.v1.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("opinit/ophost/v1/tx.proto", fileDescriptor_d16af6eaf4088d05) }

var fileDescriptor_d16af6eaf4088d05 = []byte{
	// 1641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xcd, 0x6f, 0x1b, 0xb7,
	0x12, 0x97, 0x64, 0xc7, 0xb1, 0x28, 0x7f, 0x6e, 0x1c, 0x5b, 0xde, 0x24, 0x5a, 0x9b, 0x49, 0x5e,
	0x1c, 0xc7, 0x96, 0x60, 0xbf, 0xf7, 0xf2, 0x00, 0x01, 0x0f, 0x68, 0xd6, 0xe9, 0x87, 0x03, 0xa8,
	0x31, 0xb6, 0x2d, 0x8a, 0x16, 0x05, 0x84, 0x95, 0x44, 0xaf, 0x16, 0x91, 0x96, 0xea, 0x92, 0xb2,
	0xe3, 0x02, 0x05, 0x8a, 0x9e, 0xda, 0x9e, 0x8a, 0xf6, 0x1f, 0xc8, 0x31, 0xc7, 0x1c, 0xfa, 0x1f,
	0xf4, 0xe2, 0x4b, 0x81, 0xa0, 0xe8, 0xa1, 0x27, 0x21, 0x8d, 0x0f, 0xe9, 0xb1, 0xd0, 0xb5, 0x97,
	0x62, 0x49, 0x2e, 0xf7, 0x43, 0x2b, 0xc7, 0xcd, 0x47, 0x7d, 0x11, 0x44, 0xce, 0x6f, 0xc8, 0x99,
	0xdf, 0x0c, 0x67, 0xc8, 0x05, 0x8b, 0xb8, 0x63, 0x3b, 0x36, 0x2d, 0xe1, 0x4e, 0x13, 0x13, 0x5a,
	0xda, 0xdb, 0x28, 0xd1, 0xfb, 0xc5, 0x8e, 0x8b, 0x29, 0x56, 0x66, 0xb8, 0xa8, 0xc8, 0x45, 0xc5,
	0xbd, 0x0d, 0x75, 0xd6, 0x6c, 0xdb, 0x0e, 0x2e, 0xb1, 0x5f, 0x0e, 0x52, 0x0b, 0x75, 0x4c, 0xda,
	0x98, 0x94, 0x6a, 0x26, 0x41, 0xa5, 0xbd, 0x8d, 0x1a, 0xa2, 0xe6, 0x46, 0xa9, 0x8e, 0x6d, 0x47,
	0xc8, 0x17, 0x84, 0xbc, 0x4d, 0x2c, 0x6f, 0xf1, 0x36, 0xb1, 0x84, 0x60, 0x91, 0x0b, 0xaa, 0x6c,
	0x54, 0xe2, 0x03, 0x21, 0x9a, 0xb3, 0xb0, 0x85, 0xf9, 0xbc, 0xf7, 0x4f, 0xcc, 0x5e, 0x1c, 0xb4,
	0xf4, 0xa0, 0x83, 0x84, 0x0e, 0xec, 0xa7, 0xc1, 0x54, 0x85, 0x58, 0x06, 0xaa, 0x63, 0xb7, 0xa1,
	0x9b, 0xb4, 0xde, 0x54, 0xee, 0x80, 0x2c, 0xe9, 0xd6, 0xda, 0x36, 0xa5, 0xc8, 0xcd, 0xa7, 0x97,
	0xd2, 0x2b, 0x59, 0x7d, 0xad, 0xdf, 0xd3, 0x66, 0x0e, 0xcc, 0x76, 0xab, 0x0c, 0xa5, 0x08, 0xfe,
	0xfc, 0xc3, 0xfa, 0x9c, 0xd8, 0xff, 0x56, 0xa3, 0xe1, 0x22, 0x42, 0xde, 0xa3, 0xae, 0xed, 0x58,
	0x46, 0xa0, 0xae, 0x6c, 0x80, 0x6c, 0xcd, 0xb5, 0x1b, 0x16, 0xaa, 0xda, 0x8d, 0x7c, 0x66, 0x29,
	0xbd, 0x32, 0xaa, 0xcf, 0x05, 0x6b, 0x49, 0x11, 0x34, 0xc6, 0xf9, 0xff, 0xed, 0x86, 0xf2, 0x3f,
	0x90, 0xab, 0x79, 0x76, 0x54, 0x6b, 0x07, 0x14, 0x91, 0xfc, 0xc8, 0x52, 0x7a, 0x65, 0x42, 0x9f,
	0xef, 0xf7, 0x34, 0x45, 0x28, 0x05, 0x42, 0x68, 0x00, 0x36, 0xd2, 0xbd, 0x41, 0x79, 0xe5, 0xcb,
	0x67, 0x8f, 0x56, 0x83, 0xbd, 0xbf, 0x79, 0xf6, 0x68, 0xf5, 0xbc, 0x70, 0x3a, 0xea, 0x21, 0xcc,
	0x83, 0xf9, 0xe8, 0x8c, 0x81, 0x48, 0x07, 0x3b, 0x04, 0xc1, 0x5f, 0xd2, 0x60, 0xba, 0x42, 0xac,
	0x2d, 0x17, 0x99, 0x14, 0xe9, 0xcc, 0x24, 0xe5, 0x36, 0x38, 0x5b, 0xf7, 0xc6, 0xd8, 0x67, 0x63,
	0xb5, 0xdf, 0xd3, 0xa6, 0xb8, 0x31, 0x42, 0x30, 0x9c, 0x0b, 0x5f, 0x55, 0x31, 0xc0, 0x58, 0x1d,
	0x3b, 0xbb, 0xb6, 0xc5, 0x68, 0xc8, 0x6d, 0x16, 0x8a, 0xf1, 0x34, 0x29, 0xf2, 0xfd, 0xb6, 0x18,
	0x4a, 0x57, 0x0f, 0x7b, 0x5a, 0xaa, 0xdf, 0xd3, 0x26, 0xc5, 0x46, 0x6c, 0x16, 0x3e, 0x7c, 0xf6,
	0x68, 0x35, 0x6d, 0x88, 0x95, 0xca, 0xd7, 0x3c, 0x8f, 0xfd, 0x1d, 0x3c, 0x7f, 0xe7, 0x03, 0x7f,
	0xc3, 0x2e, 0xc0, 0x9b, 0x60, 0x21, 0x36, 0xe5, 0x7b, 0xac, 0x5c, 0x08, 0x47, 0xc8, 0xf3, 0x6f,
	0x34, 0x88, 0x05, 0xec, 0x67, 0xc0, 0x4c, 0x85, 0x58, 0x3b, 0x2e, 0xee, 0x60, 0x82, 0xee, 0x76,
	0x69, 0xa7, 0x4b, 0x95, 0xb7, 0xc1, 0x78, 0x87, 0x4f, 0xf8, 0x84, 0xdc, 0xe8, 0xf7, 0xb4, 0x69,
	0x6e, 0xa7, 0x2f, 0x19, 0xce, 0x88, 0x54, 0x7e, 0x91, 0xe4, 0x28, 0x83, 0x09, 0xcc, 0xac, 0xa8,
	0xda, 0x4e, 0x03, 0xdd, 0x67, 0xd9, 0x31, 0xaa, 0x2f, 0xf4, 0x7b, 0xda, 0x39, 0xae, 0x15, 0x96,
	0x42, 0x23, 0xc7, 0x87, 0xdb, 0xde, 0x48, 0xd1, 0xc1, 0x74, 0x6b, 0xb3, 0x5a, 0x6b, 0xe1, 0xfa,
	0xbd, 0xaa, 0xd3, 0x6d, 0xd7, 0x90, 0x9b, 0x1f, 0x65, 0xea, 0x6a, 0xbf, 0xa7, 0xcd, 0x73, 0xf5,
	0x18, 0x00, 0x1a, 0x93, 0xad, 0x4d, 0xdd, 0x9b, 0x78, 0x97, 0x8d, 0xbd, 0xe4, 0x14, 0x3b, 0xb8,
	0x18, 0xd3, 0xfc, 0x99, 0x78, 0x72, 0x86, 0x84, 0xd0, 0x00, 0x7c, 0x64, 0x60, 0x4c, 0xcb, 0xd7,
	0xbd, 0x50, 0x49, 0xd7, 0xbd, 0x58, 0x2d, 0x04, 0xb1, 0x8a, 0xf0, 0x0b, 0x55, 0x90, 0x8f, 0xcf,
	0xc9, 0xfc, 0xfc, 0x93, 0xe7, 0xe7, 0x6d, 0xd4, 0x42, 0xd4, 0x8f, 0x47, 0x05, 0x80, 0x7a, 0xd3,
	0x6c, 0xb5, 0x90, 0x63, 0xc9, 0x88, 0xac, 0xf7, 0x7b, 0xda, 0xac, 0xc8, 0x1c, 0x29, 0x1b, 0x1e,
	0x93, 0xd0, 0x02, 0xff, 0x70, 0x54, 0xca, 0xab, 0x1e, 0x31, 0xa1, 0xfd, 0x63, 0x69, 0x1c, 0xf6,
	0x14, 0x2e, 0xb2, 0x34, 0x0e, 0x4f, 0x49, 0x62, 0x8e, 0x32, 0x4c, 0xb6, 0xed, 0xd8, 0xd4, 0x36,
	0x29, 0x7a, 0x1f, 0xdf, 0x43, 0xce, 0x6d, 0xd4, 0xc1, 0xc4, 0xa6, 0xca, 0x2d, 0x30, 0x46, 0x90,
	0xd3, 0x90, 0xe4, 0x5c, 0x0f, 0x8e, 0x15, 0x9f, 0x1f, 0x4e, 0x8c, 0x50, 0x7c, 0x11, 0x52, 0x2e,
	0x81, 0x0c, 0xc5, 0x8c, 0x8a, 0xac, 0x3e, 0xd9, 0xef, 0x69, 0x59, 0x8e, 0xa5, 0x18, 0x1a, 0x19,
	0x8a, 0x95, 0x0a, 0x18, 0x33, 0xdb, 0xb8, 0xeb, 0x50, 0x96, 0x84, 0xb9, 0xcd, 0xc5, 0xa2, 0x30,
	0xc0, 0xeb, 0x08, 0x45, 0xd1, 0x11, 0x8a, 0x5b, 0xd8, 0x76, 0xe2, 0xa5, 0x80, 0xab, 0xf9, 0xa5,
	0x80, 0x8f, 0x94, 0x35, 0x30, 0xda, 0x30, 0xa9, 0x29, 0x32, 0x32, 0x7f, 0xd8, 0xd3, 0xd2, 0xfd,
	0x9e, 0x96, 0xe3, 0x1a, 0x9e, 0x84, 0xe1, 0x53, 0x06, 0x43, 0x95, 0x6f, 0x7e, 0xf5, 0x40, 0x4b,
	0xfd, 0xfe, 0x40, 0x4b, 0x79, 0xe4, 0x0b, 0x1f, 0x3d, 0xe2, 0x0b, 0x01, 0xf1, 0x49, 0x4c, 0xc2,
	0xff, 0x03, 0x6d, 0x88, 0x48, 0xd6, 0x13, 0x15, 0x8c, 0x13, 0xf4, 0x69, 0x17, 0x39, 0x75, 0xe4,
	0x97, 0x13, 0x7f, 0x0c, 0x7f, 0x3c, 0x03, 0xd4, 0x0a, 0xb1, 0xde, 0xb2, 0x1d, 0xb3, 0x65, 0x7f,
	0xc6, 0xf5, 0x3f, 0xb4, 0x69, 0xb3, 0xe1, 0x9a, 0xfb, 0x66, 0xeb, 0x94, 0xe2, 0xf4, 0x32, 0x25,
	0xe5, 0x26, 0x98, 0xdd, 0x97, 0xf6, 0x7b, 0x2d, 0x19, 0xef, 0x92, 0xfc, 0xe8, 0xd2, 0xc8, 0xca,
	0x84, 0x9e, 0xf5, 0x42, 0xc0, 0x39, 0x9f, 0x09, 0x30, 0x3b, 0x0c, 0xa2, 0x5c, 0x06, 0xa3, 0xbb,
	0x2e, 0x6e, 0xb3, 0x68, 0x65, 0xf5, 0xe9, 0x20, 0x52, 0xde, 0x2c, 0x34, 0x98, 0x50, 0xf9, 0x2f,
	0x4b, 0xa0, 0x31, 0x06, 0xb9, 0x1a, 0x49, 0xa0, 0xa1, 0x34, 0x78, 0x89, 0x55, 0x0a, 0x05, 0xe0,
	0x2c, 0xf3, 0xe5, 0x5c, 0x50, 0x9e, 0x65, 0x28, 0x82, 0xa8, 0x84, 0x32, 0x71, 0xfc, 0xd5, 0x64,
	0xe2, 0xd9, 0x3d, 0xe4, 0x12, 0x1b, 0x3b, 0xf9, 0x2c, 0x4b, 0x46, 0x25, 0x68, 0x97, 0x42, 0x00,
	0x0d, 0x1f, 0xe2, 0xb1, 0x4f, 0x28, 0x76, 0x4d, 0x0b, 0xf1, 0x8a, 0x0a, 0x98, 0x4a, 0x88, 0xfd,
	0xb0, 0x14, 0x1a, 0x39, 0x31, 0xf4, 0x6a, 0x2a, 0x2b, 0xe8, 0x26, 0xa1, 0xa2, 0x62, 0x37, 0x4d,
	0xd2, 0xcc, 0xe7, 0x98, 0x7a, 0xb8, 0xa0, 0x47, 0x01, 0x5e, 0x41, 0x37, 0x09, 0x65, 0x25, 0xfd,
	0x1d, 0x93, 0x34, 0xcb, 0x1b, 0xb1, 0x13, 0xb0, 0x1c, 0x9c, 0x80, 0x21, 0x69, 0x0a, 0xaf, 0x00,
	0x38, 0x5c, 0x2a, 0x0b, 0xd2, 0xf7, 0x19, 0x30, 0x5b, 0x21, 0xd6, 0x07, 0x9d, 0x86, 0x49, 0xd1,
	0x8e, 0xdf, 0xf2, 0xee, 0x80, 0xac, 0xd9, 0xa5, 0x4d, 0xec, 0xda, 0xf4, 0x60, 0xf0, 0x6e, 0x25,
	0x45, 0xc7, 0xdc, 0xad, 0x24, 0xe6, 0x45, 0x72, 0xdd, 0x00, 0x13, 0x0e, 0xda, 0xaf, 0xca, 0xf6,
	0xcd, 0xab, 0x53, 0x29, 0x60, 0x3b, 0x2c, 0x1d, 0x6e, 0x44, 0xce, 0x41, 0xfb, 0xbe, 0x4b, 0xe5,
	0x1b, 0xec, 0xda, 0x25, 0xcd, 0xf2, 0x48, 0xcc, 0x07, 0x24, 0x46, 0xfd, 0x87, 0xbb, 0x60, 0x71,
	0x60, 0x52, 0x96, 0x8e, 0xe5, 0xd8, 0x49, 0xe4, 0xe5, 0x23, 0x72, 0xe0, 0xfe, 0x35, 0xd8, 0xc3,
	0x99, 0xe7, 0xb1, 0x3e, 0x0d, 0xbf, 0xcb, 0x80, 0x73, 0x72, 0xa3, 0xad, 0xa0, 0xb9, 0x9d, 0x32,
	0xff, 0xd1, 0x56, 0x3d, 0xf2, 0x92, 0xad, 0xba, 0xbc, 0x3e, 0x48, 0xbd, 0x1a, 0xa7, 0x3e, 0x70,
	0x1e, 0x36, 0xc1, 0x85, 0x84, 0xe9, 0xd7, 0x41, 0xff, 0xc3, 0x0c, 0x50, 0xe4, 0x56, 0xec, 0x86,
	0xbd, 0xed, 0xec, 0xe2, 0xd3, 0x66, 0x1f, 0x81, 0x29, 0x2f, 0xbf, 0xf9, 0x03, 0xc2, 0x76, 0x76,
	0x79, 0x77, 0xce, 0x6d, 0x5e, 0x48, 0xb8, 0x8a, 0xfb, 0x36, 0xeb, 0x50, 0x94, 0xbc, 0xf3, 0xc1,
	0x01, 0x09, 0x16, 0x10, 0xa5, 0xcf, 0x3b, 0x54, 0x52, 0xa3, 0xbc, 0x36, 0x18, 0x95, 0xc5, 0x78,
	0x54, 0x24, 0x1a, 0x5a, 0xac, 0x25, 0xc6, 0x66, 0x5f, 0x47, 0x4c, 0xbe, 0xce, 0x80, 0xf3, 0x72,
	0xa7, 0xbb, 0xae, 0x59, 0x6f, 0x89, 0xa7, 0xc6, 0x69, 0x87, 0xe5, 0x0d, 0x30, 0x85, 0x99, 0x39,
	0x55, 0xe4, 0x98, 0xb5, 0x16, 0x6a, 0xb0, 0xb0, 0x8c, 0xeb, 0x8b, 0x01, 0xeb, 0x51, 0x39, 0x34,
	0x26, 0xf9, 0xc4, 0x9b, 0x7c, 0x5c, 0x2e, 0x0d, 0x32, 0x7e, 0x31, 0xce, 0x78, 0xd8, 0x63, 0xa8,
	0x81, 0x4b, 0x89, 0x02, 0x59, 0xbd, 0xff, 0x48, 0x87, 0xaa, 0x77, 0x05, 0x51, 0xd3, 0xbb, 0x36,
	0x9d, 0x36, 0x51, 0x25, 0x30, 0xde, 0x16, 0xa6, 0x88, 0x67, 0x71, 0xa8, 0xb3, 0xfb, 0x12, 0x68,
	0x48, 0xd0, 0x89, 0x4a, 0xb3, 0xef, 0x5c, 0xa4, 0x34, 0xfb, 0x93, 0xaf, 0x23, 0x0f, 0x7f, 0xe2,
	0x4f, 0x18, 0xd1, 0x03, 0x4c, 0xd7, 0x6c, 0x93, 0x57, 0x4a, 0xec, 0x16, 0x18, 0xeb, 0xb0, 0x55,
	0xc5, 0x43, 0x3b, 0x3f, 0x78, 0xba, 0xf9, 0xae, 0xfa, 0x6c, 0x70, 0x93, 0xe1, 0x1a, 0xd0, 0x10,
	0xaa, 0xfc, 0xb9, 0x16, 0x65, 0x6e, 0x7e, 0xa0, 0xa9, 0x71, 0x1d, 0xfe, 0x28, 0x09, 0x4f, 0xf9,
	0xac, 0x6d, 0x3e, 0xc9, 0x82, 0x91, 0x0a, 0xb1, 0x94, 0x8f, 0x40, 0x2e, 0xfc, 0x81, 0x65, 0x69,
	0xd0, 0xa2, 0xe8, 0xe7, 0x08, 0x75, 0xe5, 0x79, 0x08, 0x19, 0x98, 0x4f, 0xc0, 0x44, 0xe4, 0x63,
	0xc5, 0x72, 0xa2, 0x66, 0x18, 0xa2, 0x5e, 0x7f, 0x2e, 0x44, 0xae, 0x5e, 0x05, 0x93, 0xd1, 0xb7,
	0x3f, 0x4c, 0xd4, 0x8d, 0x60, 0xd4, 0xd5, 0xe7, 0x63, 0xc2, 0xe6, 0x47, 0xde, 0xb2, 0xc9, 0xe6,
	0x87, 0x21, 0x43, 0xcc, 0x4f, 0x7a, 0x14, 0x2a, 0x14, 0xcc, 0x25, 0x3e, 0x08, 0x93, 0x97, 0x48,
	0x82, 0xaa, 0x1b, 0x27, 0x86, 0xca, 0x5d, 0x3f, 0x07, 0x0b, 0xc3, 0x5e, 0x38, 0x6b, 0x89, 0xab,
	0x0d, 0x41, 0xab, 0xff, 0xf9, 0x3b, 0x68, 0xb9, 0x7d, 0x0d, 0x4c, 0xc5, 0x2e, 0x9d, 0x97, 0x13,
	0xd7, 0x89, 0x82, 0xd4, 0x1b, 0x27, 0x00, 0xc9, 0x3d, 0x9a, 0x60, 0x66, 0xe0, 0x6a, 0x75, 0xf5,
	0x98, 0x05, 0x02, 0x98, 0xba, 0x7e, 0x22, 0x98, 0xdc, 0x09, 0x81, 0xe9, 0xf8, 0x2d, 0xe2, 0xca,
	0x31, 0x2b, 0x48, 0x94, 0xba, 0x76, 0x12, 0xd4, 0x20, 0x69, 0xb2, 0xd6, 0x1f, 0x47, 0x9a, 0x0f,
	0x3a, 0x96, 0xb4, 0x81, 0x1a, 0xea, 0x00, 0x25, 0xa1, 0xf9, 0x5e, 0x3b, 0x66, 0x89, 0x30, 0x50,
	0x2d, 0x9d, 0x10, 0x18, 0x3e, 0x5b, 0x91, 0x22, 0xbb, 0x7c, 0x5c, 0x84, 0x19, 0x64, 0xc8, 0xd9,
	0x4a, 0xaa, 0x6d, 0xea, 0x99, 0x2f, 0xbc, 0xab, 0x8f, 0x7e, 0xe7, 0xf0, 0xb7, 0x42, 0xea, 0xf0,
	0x69, 0x21, 0xfd, 0xf8, 0x69, 0x21, 0xfd, 0xe4, 0x69, 0x21, 0xfd, 0xed, 0x51, 0x21, 0xf5, 0xf8,
	0xa8, 0x90, 0xfa, 0xf5, 0xa8, 0x90, 0xfa, 0x78, 0xcd, 0xb2, 0x69, 0xb3, 0x5b, 0x2b, 0xd6, 0x71,
	0xbb, 0x64, 0xb3, 0x33, 0xb3, 0xde, 0x32, 0x6b, 0xa4, 0x74, 0x77, 0x87, 0x7d, 0x92, 0xbe, 0xef,
	0x7f, 0x94, 0x66, 0x5f, 0xa4, 0x6b, 0x63, 0xec, 0x93, 0xf4, 0xbf, 0xff, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0xc9, 0xd7, 0x01, 0x4c, 0x5c, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RecordBatch defines a rpc handler method for MsgRecordBatch.
	RecordBatch(ctx context.Context, in *MsgRecordBatch, opts ...grpc.CallOption) (*MsgRecordBatchResponse, error)
	// CreateBridge defines a rpc handler method for MsgCreateBridge.
	CreateBridge(ctx context.Context, in *MsgCreateBridge, opts ...grpc.CallOption) (*MsgCreateBridgeResponse, error)
	// ProposeOutput defines a rpc handler method for MsgProposeOutput.
	ProposeOutput(ctx context.Context, in *MsgProposeOutput, opts ...grpc.CallOption) (*MsgProposeOutputResponse, error)
	// DeleteOutput defines a rpc handler method for MsgDeleteOutput.
	DeleteOutput(ctx context.Context, in *MsgDeleteOutput, opts ...grpc.CallOption) (*MsgDeleteOutputResponse, error)
	// InitiateTokenDeposit defines a user facing l1 => l2 token transfer interface.
	InitiateTokenDeposit(ctx context.Context, in *MsgInitiateTokenDeposit, opts ...grpc.CallOption) (*MsgInitiateTokenDepositResponse, error)
	// FinalizeTokenWithdrawal defines a user facing l2 => l1 token transfer interface.
	FinalizeTokenWithdrawal(ctx context.Context, in *MsgFinalizeTokenWithdrawal, opts ...grpc.CallOption) (*MsgFinalizeTokenWithdrawalResponse, error)
	// UpdateProposer defines a rpc handler method for MsgUpdateProposer.
	UpdateProposer(ctx context.Context, in *MsgUpdateProposer, opts ...grpc.CallOption) (*MsgUpdateProposerResponse, error)
	// UpdateChallenger defines a rpc handler method for MsgUpdateChallenger.
	UpdateChallenger(ctx context.Context, in *MsgUpdateChallenger, opts ...grpc.CallOption) (*MsgUpdateChallengerResponse, error)
	// UpdateBatchInfo defines a rpc handler method for MsgUpdateBatchInfo.
	UpdateBatchInfo(ctx context.Context, in *MsgUpdateBatchInfo, opts ...grpc.CallOption) (*MsgUpdateBatchInfoResponse, error)
	// UpdateMetadata defines a rpc handler method for MsgUpdateMetadata.
	UpdateMetadata(ctx context.Context, in *MsgUpdateMetadata, opts ...grpc.CallOption) (*MsgUpdateMetadataResponse, error)
	// UpdateOracleConfig defines a rpc handler method for MsgUpdateOracleConfig.
	UpdateOracleConfig(ctx context.Context, in *MsgUpdateOracleConfig, opts ...grpc.CallOption) (*MsgUpdateOracleConfigResponse, error)
	// UpdateParams defines an operation for updating the
	// x/opchild module parameters.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RecordBatch(ctx context.Context, in *MsgRecordBatch, opts ...grpc.CallOption) (*MsgRecordBatchResponse, error) {
	out := new(MsgRecordBatchResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/RecordBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateBridge(ctx context.Context, in *MsgCreateBridge, opts ...grpc.CallOption) (*MsgCreateBridgeResponse, error) {
	out := new(MsgCreateBridgeResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/CreateBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ProposeOutput(ctx context.Context, in *MsgProposeOutput, opts ...grpc.CallOption) (*MsgProposeOutputResponse, error) {
	out := new(MsgProposeOutputResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/ProposeOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteOutput(ctx context.Context, in *MsgDeleteOutput, opts ...grpc.CallOption) (*MsgDeleteOutputResponse, error) {
	out := new(MsgDeleteOutputResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/DeleteOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitiateTokenDeposit(ctx context.Context, in *MsgInitiateTokenDeposit, opts ...grpc.CallOption) (*MsgInitiateTokenDepositResponse, error) {
	out := new(MsgInitiateTokenDepositResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/InitiateTokenDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinalizeTokenWithdrawal(ctx context.Context, in *MsgFinalizeTokenWithdrawal, opts ...grpc.CallOption) (*MsgFinalizeTokenWithdrawalResponse, error) {
	out := new(MsgFinalizeTokenWithdrawalResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/FinalizeTokenWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateProposer(ctx context.Context, in *MsgUpdateProposer, opts ...grpc.CallOption) (*MsgUpdateProposerResponse, error) {
	out := new(MsgUpdateProposerResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/UpdateProposer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateChallenger(ctx context.Context, in *MsgUpdateChallenger, opts ...grpc.CallOption) (*MsgUpdateChallengerResponse, error) {
	out := new(MsgUpdateChallengerResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/UpdateChallenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateBatchInfo(ctx context.Context, in *MsgUpdateBatchInfo, opts ...grpc.CallOption) (*MsgUpdateBatchInfoResponse, error) {
	out := new(MsgUpdateBatchInfoResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/UpdateBatchInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMetadata(ctx context.Context, in *MsgUpdateMetadata, opts ...grpc.CallOption) (*MsgUpdateMetadataResponse, error) {
	out := new(MsgUpdateMetadataResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/UpdateMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOracleConfig(ctx context.Context, in *MsgUpdateOracleConfig, opts ...grpc.CallOption) (*MsgUpdateOracleConfigResponse, error) {
	out := new(MsgUpdateOracleConfigResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/UpdateOracleConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/opinit.ophost.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RecordBatch defines a rpc handler method for MsgRecordBatch.
	RecordBatch(context.Context, *MsgRecordBatch) (*MsgRecordBatchResponse, error)
	// CreateBridge defines a rpc handler method for MsgCreateBridge.
	CreateBridge(context.Context, *MsgCreateBridge) (*MsgCreateBridgeResponse, error)
	// ProposeOutput defines a rpc handler method for MsgProposeOutput.
	ProposeOutput(context.Context, *MsgProposeOutput) (*MsgProposeOutputResponse, error)
	// DeleteOutput defines a rpc handler method for MsgDeleteOutput.
	DeleteOutput(context.Context, *MsgDeleteOutput) (*MsgDeleteOutputResponse, error)
	// InitiateTokenDeposit defines a user facing l1 => l2 token transfer interface.
	InitiateTokenDeposit(context.Context, *MsgInitiateTokenDeposit) (*MsgInitiateTokenDepositResponse, error)
	// FinalizeTokenWithdrawal defines a user facing l2 => l1 token transfer interface.
	FinalizeTokenWithdrawal(context.Context, *MsgFinalizeTokenWithdrawal) (*MsgFinalizeTokenWithdrawalResponse, error)
	// UpdateProposer defines a rpc handler method for MsgUpdateProposer.
	UpdateProposer(context.Context, *MsgUpdateProposer) (*MsgUpdateProposerResponse, error)
	// UpdateChallenger defines a rpc handler method for MsgUpdateChallenger.
	UpdateChallenger(context.Context, *MsgUpdateChallenger) (*MsgUpdateChallengerResponse, error)
	// UpdateBatchInfo defines a rpc handler method for MsgUpdateBatchInfo.
	UpdateBatchInfo(context.Context, *MsgUpdateBatchInfo) (*MsgUpdateBatchInfoResponse, error)
	// UpdateMetadata defines a rpc handler method for MsgUpdateMetadata.
	UpdateMetadata(context.Context, *MsgUpdateMetadata) (*MsgUpdateMetadataResponse, error)
	// UpdateOracleConfig defines a rpc handler method for MsgUpdateOracleConfig.
	UpdateOracleConfig(context.Context, *MsgUpdateOracleConfig) (*MsgUpdateOracleConfigResponse, error)
	// UpdateParams defines an operation for updating the
	// x/opchild module parameters.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RecordBatch(ctx context.Context, req *MsgRecordBatch) (*MsgRecordBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordBatch not implemented")
}
func (*UnimplementedMsgServer) CreateBridge(ctx context.Context, req *MsgCreateBridge) (*MsgCreateBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridge not implemented")
}
func (*UnimplementedMsgServer) ProposeOutput(ctx context.Context, req *MsgProposeOutput) (*MsgProposeOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeOutput not implemented")
}
func (*UnimplementedMsgServer) DeleteOutput(ctx context.Context, req *MsgDeleteOutput) (*MsgDeleteOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOutput not implemented")
}
func (*UnimplementedMsgServer) InitiateTokenDeposit(ctx context.Context, req *MsgInitiateTokenDeposit) (*MsgInitiateTokenDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTokenDeposit not implemented")
}
func (*UnimplementedMsgServer) FinalizeTokenWithdrawal(ctx context.Context, req *MsgFinalizeTokenWithdrawal) (*MsgFinalizeTokenWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeTokenWithdrawal not implemented")
}
func (*UnimplementedMsgServer) UpdateProposer(ctx context.Context, req *MsgUpdateProposer) (*MsgUpdateProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProposer not implemented")
}
func (*UnimplementedMsgServer) UpdateChallenger(ctx context.Context, req *MsgUpdateChallenger) (*MsgUpdateChallengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChallenger not implemented")
}
func (*UnimplementedMsgServer) UpdateBatchInfo(ctx context.Context, req *MsgUpdateBatchInfo) (*MsgUpdateBatchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBatchInfo not implemented")
}
func (*UnimplementedMsgServer) UpdateMetadata(ctx context.Context, req *MsgUpdateMetadata) (*MsgUpdateMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetadata not implemented")
}
func (*UnimplementedMsgServer) UpdateOracleConfig(ctx context.Context, req *MsgUpdateOracleConfig) (*MsgUpdateOracleConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOracleConfig not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RecordBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRecordBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RecordBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/RecordBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RecordBatch(ctx, req.(*MsgRecordBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateBridge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/CreateBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateBridge(ctx, req.(*MsgCreateBridge))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ProposeOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgProposeOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ProposeOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/ProposeOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ProposeOutput(ctx, req.(*MsgProposeOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteOutput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/DeleteOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteOutput(ctx, req.(*MsgDeleteOutput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitiateTokenDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateTokenDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateTokenDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/InitiateTokenDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateTokenDeposit(ctx, req.(*MsgInitiateTokenDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinalizeTokenWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalizeTokenWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinalizeTokenWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/FinalizeTokenWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinalizeTokenWithdrawal(ctx, req.(*MsgFinalizeTokenWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateProposer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/UpdateProposer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateProposer(ctx, req.(*MsgUpdateProposer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateChallenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateChallenger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateChallenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/UpdateChallenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateChallenger(ctx, req.(*MsgUpdateChallenger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateBatchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateBatchInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateBatchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/UpdateBatchInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateBatchInfo(ctx, req.(*MsgUpdateBatchInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMetadata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/UpdateMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMetadata(ctx, req.(*MsgUpdateMetadata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOracleConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOracleConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOracleConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/UpdateOracleConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOracleConfig(ctx, req.(*MsgUpdateOracleConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/opinit.ophost.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "opinit.ophost.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RecordBatch",
			Handler:    _Msg_RecordBatch_Handler,
		},
		{
			MethodName: "CreateBridge",
			Handler:    _Msg_CreateBridge_Handler,
		},
		{
			MethodName: "ProposeOutput",
			Handler:    _Msg_ProposeOutput_Handler,
		},
		{
			MethodName: "DeleteOutput",
			Handler:    _Msg_DeleteOutput_Handler,
		},
		{
			MethodName: "InitiateTokenDeposit",
			Handler:    _Msg_InitiateTokenDeposit_Handler,
		},
		{
			MethodName: "FinalizeTokenWithdrawal",
			Handler:    _Msg_FinalizeTokenWithdrawal_Handler,
		},
		{
			MethodName: "UpdateProposer",
			Handler:    _Msg_UpdateProposer_Handler,
		},
		{
			MethodName: "UpdateChallenger",
			Handler:    _Msg_UpdateChallenger_Handler,
		},
		{
			MethodName: "UpdateBatchInfo",
			Handler:    _Msg_UpdateBatchInfo_Handler,
		},
		{
			MethodName: "UpdateMetadata",
			Handler:    _Msg_UpdateMetadata_Handler,
		},
		{
			MethodName: "UpdateOracleConfig",
			Handler:    _Msg_UpdateOracleConfig_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opinit/ophost/v1/tx.proto",
}

func (m *MsgRecordBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchBytes) > 0 {
		i -= len(m.BatchBytes)
		copy(dAtA[i:], m.BatchBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BatchBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Submitter) > 0 {
		i -= len(m.Submitter)
		copy(dAtA[i:], m.Submitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Submitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRecordBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRecordBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRecordBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateBridge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateBridgeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateBridgeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateBridgeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutputRoot) > 0 {
		i -= len(m.OutputRoot)
		copy(dAtA[i:], m.OutputRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OutputRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if m.L2BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.L2BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.OutputIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgProposeOutputResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgProposeOutputResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgProposeOutputResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeleteOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutputIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Challenger) > 0 {
		i -= len(m.Challenger)
		copy(dAtA[i:], m.Challenger)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Challenger)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeleteOutputResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeleteOutputResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeleteOutputResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgInitiateTokenDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateTokenDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateTokenDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInitiateTokenDepositResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInitiateTokenDepositResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInitiateTokenDepositResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeTokenWithdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeTokenWithdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeTokenWithdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastBlockHash) > 0 {
		i -= len(m.LastBlockHash)
		copy(dAtA[i:], m.LastBlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LastBlockHash)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.StorageRoot) > 0 {
		i -= len(m.StorageRoot)
		copy(dAtA[i:], m.StorageRoot)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StorageRoot)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.Sequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x38
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTx(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WithdrawalProofs) > 0 {
		for iNdEx := len(m.WithdrawalProofs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WithdrawalProofs[iNdEx])
			copy(dAtA[i:], m.WithdrawalProofs[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.WithdrawalProofs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.OutputIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeTokenWithdrawalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeTokenWithdrawalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeTokenWithdrawalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateProposer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateProposer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateProposer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewProposer) > 0 {
		i -= len(m.NewProposer)
		copy(dAtA[i:], m.NewProposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewProposer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateProposerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateProposerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateProposerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L2BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.L2BlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.OutputIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChallenger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChallenger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChallenger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Challenger) > 0 {
		i -= len(m.Challenger)
		copy(dAtA[i:], m.Challenger)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Challenger)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChallengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChallengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChallengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L2BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.L2BlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.OutputIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBatchInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBatchInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBatchInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NewBatchInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateBatchInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateBatchInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateBatchInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L2BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.L2BlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.OutputIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOracleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOracleConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOracleConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OracleEnabled {
		i--
		if m.OracleEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOracleConfigResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOracleConfigResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOracleConfigResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metadata) > 0 {
		i -= len(m.Metadata)
		copy(dAtA[i:], m.Metadata)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Metadata)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BridgeId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMetadataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMetadataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMetadataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L2BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.L2BlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if m.OutputIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRecordBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Submitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = len(m.BatchBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRecordBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateBridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Config.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateBridgeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	return n
}

func (m *MsgProposeOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	if m.OutputIndex != 0 {
		n += 1 + sovTx(uint64(m.OutputIndex))
	}
	if m.L2BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.L2BlockNumber))
	}
	l = len(m.OutputRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgProposeOutputResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeleteOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Challenger)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	if m.OutputIndex != 0 {
		n += 1 + sovTx(uint64(m.OutputIndex))
	}
	return n
}

func (m *MsgDeleteOutputResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgInitiateTokenDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgInitiateTokenDepositResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovTx(uint64(m.Sequence))
	}
	return n
}

func (m *MsgFinalizeTokenWithdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	if m.OutputIndex != 0 {
		n += 1 + sovTx(uint64(m.OutputIndex))
	}
	if len(m.WithdrawalProofs) > 0 {
		for _, b := range m.WithdrawalProofs {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovTx(uint64(m.Sequence))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StorageRoot)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LastBlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFinalizeTokenWithdrawalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateProposer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = len(m.NewProposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateProposerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputIndex != 0 {
		n += 1 + sovTx(uint64(m.OutputIndex))
	}
	if m.L2BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.L2BlockNumber))
	}
	return n
}

func (m *MsgUpdateChallenger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = len(m.Challenger)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateChallengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputIndex != 0 {
		n += 1 + sovTx(uint64(m.OutputIndex))
	}
	if m.L2BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.L2BlockNumber))
	}
	return n
}

func (m *MsgUpdateBatchInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = m.NewBatchInfo.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateBatchInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputIndex != 0 {
		n += 1 + sovTx(uint64(m.OutputIndex))
	}
	if m.L2BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.L2BlockNumber))
	}
	return n
}

func (m *MsgUpdateOracleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	if m.OracleEnabled {
		n += 2
	}
	return n
}

func (m *MsgUpdateOracleConfigResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BridgeId != 0 {
		n += 1 + sovTx(uint64(m.BridgeId))
	}
	l = len(m.Metadata)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateMetadataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputIndex != 0 {
		n += 1 + sovTx(uint64(m.OutputIndex))
	}
	if m.L2BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.L2BlockNumber))
	}
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRecordBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchBytes = append(m.BatchBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.BatchBytes == nil {
				m.BatchBytes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRecordBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRecordBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRecordBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBridge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBridge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBridge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateBridgeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateBridgeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateBridgeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2BlockNumber", wireType)
			}
			m.L2BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputRoot = append(m.OutputRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.OutputRoot == nil {
				m.OutputRoot = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgProposeOutputResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgProposeOutputResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgProposeOutputResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeleteOutputResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeleteOutputResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeleteOutputResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateTokenDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateTokenDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateTokenDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInitiateTokenDepositResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInitiateTokenDepositResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInitiateTokenDepositResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeTokenWithdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeTokenWithdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeTokenWithdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalProofs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalProofs = append(m.WithdrawalProofs, make([]byte, postIndex-iNdEx))
			copy(m.WithdrawalProofs[len(m.WithdrawalProofs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = append(m.Version[:0], dAtA[iNdEx:postIndex]...)
			if m.Version == nil {
				m.Version = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageRoot = append(m.StorageRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.StorageRoot == nil {
				m.StorageRoot = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockHash = append(m.LastBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LastBlockHash == nil {
				m.LastBlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeTokenWithdrawalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeTokenWithdrawalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeTokenWithdrawalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateProposer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateProposer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateProposer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewProposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewProposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateProposerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateProposerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateProposerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2BlockNumber", wireType)
			}
			m.L2BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChallenger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChallenger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChallenger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenger", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenger = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChallengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChallengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChallengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2BlockNumber", wireType)
			}
			m.L2BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBatchInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBatchInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBatchInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBatchInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewBatchInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateBatchInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateBatchInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateBatchInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2BlockNumber", wireType)
			}
			m.L2BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOracleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOracleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOracleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OracleEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOracleConfigResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOracleConfigResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOracleConfigResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata[:0], dAtA[iNdEx:postIndex]...)
			if m.Metadata == nil {
				m.Metadata = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMetadataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMetadataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMetadataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L2BlockNumber", wireType)
			}
			m.L2BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L2BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
