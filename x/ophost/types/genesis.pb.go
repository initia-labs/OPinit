// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: opinit/ophost/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the rollup module's genesis state.
type GenesisState struct {
	// params defines all the parameters of related to deposit.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// bridges defines the registered bridges.
	Bridges []Bridge `protobuf:"bytes,2,rep,name=bridges,proto3" json:"bridges"`
	// the id will be asisgned to a new bridge.
	NextBridgeId uint64 `protobuf:"varint,3,opt,name=next_bridge_id,json=nextBridgeId,proto3" json:"next_bridge_id,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e2545c1f1c6a3ab, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetBridges() []Bridge {
	if m != nil {
		return m.Bridges
	}
	return nil
}

func (m *GenesisState) GetNextBridgeId() uint64 {
	if m != nil {
		return m.NextBridgeId
	}
	return 0
}

// Bridge defeins a bridge state.
type Bridge struct {
	BridgeId uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	// l1 sequence number.
	NextL1Sequence uint64 `protobuf:"varint,2,opt,name=next_l1_sequence,json=nextL1Sequence,proto3" json:"next_l1_sequence,omitempty"`
	// next output index.
	NextOutputIndex uint64 `protobuf:"varint,3,opt,name=next_output_index,json=nextOutputIndex,proto3" json:"next_output_index,omitempty"`
	// a bridge config.
	BridgeConfig BridgeConfig `protobuf:"bytes,4,opt,name=bridge_config,json=bridgeConfig,proto3" json:"bridge_config"`
	// a list of (l1, l2) token pairs
	TokenPairs []TokenPair `protobuf:"bytes,5,rep,name=token_pairs,json=tokenPairs,proto3" json:"token_pairs"`
	// a list of l2 output proposals, which has been proven.
	ProvenWithdrawals [][]byte `protobuf:"bytes,6,rep,name=proven_withdrawals,json=provenWithdrawals,proto3" json:"proven_withdrawals,omitempty"`
	// a list of l2 output proposals.
	Proposals []WrappedOutput `protobuf:"bytes,7,rep,name=proposals,proto3" json:"proposals"`
	// a list of batch infos.
	BatchInfos []BatchInfoWithOutput `protobuf:"bytes,8,rep,name=batch_infos,json=batchInfos,proto3" json:"batch_infos"`
}

func (m *Bridge) Reset()         { *m = Bridge{} }
func (m *Bridge) String() string { return proto.CompactTextString(m) }
func (*Bridge) ProtoMessage()    {}
func (*Bridge) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e2545c1f1c6a3ab, []int{1}
}
func (m *Bridge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bridge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bridge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bridge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bridge.Merge(m, src)
}
func (m *Bridge) XXX_Size() int {
	return m.Size()
}
func (m *Bridge) XXX_DiscardUnknown() {
	xxx_messageInfo_Bridge.DiscardUnknown(m)
}

var xxx_messageInfo_Bridge proto.InternalMessageInfo

func (m *Bridge) GetBridgeId() uint64 {
	if m != nil {
		return m.BridgeId
	}
	return 0
}

func (m *Bridge) GetNextL1Sequence() uint64 {
	if m != nil {
		return m.NextL1Sequence
	}
	return 0
}

func (m *Bridge) GetNextOutputIndex() uint64 {
	if m != nil {
		return m.NextOutputIndex
	}
	return 0
}

func (m *Bridge) GetBridgeConfig() BridgeConfig {
	if m != nil {
		return m.BridgeConfig
	}
	return BridgeConfig{}
}

func (m *Bridge) GetTokenPairs() []TokenPair {
	if m != nil {
		return m.TokenPairs
	}
	return nil
}

func (m *Bridge) GetProvenWithdrawals() [][]byte {
	if m != nil {
		return m.ProvenWithdrawals
	}
	return nil
}

func (m *Bridge) GetProposals() []WrappedOutput {
	if m != nil {
		return m.Proposals
	}
	return nil
}

func (m *Bridge) GetBatchInfos() []BatchInfoWithOutput {
	if m != nil {
		return m.BatchInfos
	}
	return nil
}

// WrappedOutput defines a wrapped output containing its index and proposal.
type WrappedOutput struct {
	OutputIndex    uint64 `protobuf:"varint,1,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	OutputProposal Output `protobuf:"bytes,2,opt,name=output_proposal,json=outputProposal,proto3" json:"output_proposal"`
}

func (m *WrappedOutput) Reset()         { *m = WrappedOutput{} }
func (m *WrappedOutput) String() string { return proto.CompactTextString(m) }
func (*WrappedOutput) ProtoMessage()    {}
func (*WrappedOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e2545c1f1c6a3ab, []int{2}
}
func (m *WrappedOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WrappedOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WrappedOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WrappedOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WrappedOutput.Merge(m, src)
}
func (m *WrappedOutput) XXX_Size() int {
	return m.Size()
}
func (m *WrappedOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_WrappedOutput.DiscardUnknown(m)
}

var xxx_messageInfo_WrappedOutput proto.InternalMessageInfo

func (m *WrappedOutput) GetOutputIndex() uint64 {
	if m != nil {
		return m.OutputIndex
	}
	return 0
}

func (m *WrappedOutput) GetOutputProposal() Output {
	if m != nil {
		return m.OutputProposal
	}
	return Output{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "opinit.ophost.v1.GenesisState")
	proto.RegisterType((*Bridge)(nil), "opinit.ophost.v1.Bridge")
	proto.RegisterType((*WrappedOutput)(nil), "opinit.ophost.v1.WrappedOutput")
}

func init() { proto.RegisterFile("opinit/ophost/v1/genesis.proto", fileDescriptor_5e2545c1f1c6a3ab) }

var fileDescriptor_5e2545c1f1c6a3ab = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0xaf, 0xd7, 0xd1, 0xad, 0x6e, 0xf6, 0xa7, 0x16, 0x87, 0x68, 0x43, 0x59, 0xa9, 0x40, 0xaa,
	0x26, 0x2d, 0x51, 0xe0, 0x88, 0xb8, 0x94, 0xc3, 0xa8, 0x34, 0xb1, 0xd2, 0x21, 0x4d, 0xe2, 0x12,
	0x39, 0x8d, 0x9b, 0x5a, 0xb4, 0xb6, 0x89, 0xdd, 0xae, 0xdc, 0x78, 0x04, 0x1e, 0x83, 0xe3, 0x1e,
	0x63, 0xc7, 0x1d, 0x39, 0xa1, 0xa9, 0x3d, 0xf0, 0x1a, 0x28, 0x76, 0xa2, 0x66, 0xa4, 0x5c, 0xaa,
	0xf8, 0xfb, 0xfd, 0xb3, 0xbf, 0xaf, 0x1f, 0x74, 0xb8, 0xa0, 0x8c, 0x2a, 0x8f, 0x8b, 0x31, 0x97,
	0xca, 0x9b, 0xfb, 0x5e, 0x4c, 0x18, 0x91, 0x54, 0xba, 0x22, 0xe1, 0x8a, 0xa3, 0x43, 0x83, 0xbb,
	0x06, 0x77, 0xe7, 0xfe, 0x51, 0x13, 0x4f, 0x29, 0xe3, 0x9e, 0xfe, 0x35, 0xa4, 0xa3, 0xa7, 0x31,
	0x8f, 0xb9, 0xfe, 0xf4, 0xd2, 0xaf, 0xac, 0xfa, 0xac, 0x64, 0xad, 0xbe, 0x09, 0x92, 0x19, 0xb7,
	0x6f, 0x01, 0xb4, 0xce, 0x4d, 0xd4, 0x95, 0xc2, 0x8a, 0xa0, 0x37, 0xb0, 0x26, 0x70, 0x82, 0xa7,
	0xd2, 0x06, 0x2d, 0xd0, 0x69, 0xbc, 0xb2, 0xdd, 0x7f, 0xa3, 0xdd, 0xbe, 0xc6, 0xbb, 0xf5, 0xbb,
	0xdf, 0x27, 0x95, 0x9f, 0x7f, 0x6e, 0x4f, 0xc1, 0x20, 0x93, 0xa0, 0xb7, 0x70, 0x27, 0x4c, 0x68,
	0x14, 0x13, 0x69, 0x6f, 0xb5, 0xaa, 0x9b, 0xd5, 0x5d, 0x4d, 0x28, 0xaa, 0x73, 0x0d, 0x7a, 0x01,
	0xf7, 0x19, 0x59, 0xa8, 0xc0, 0x9c, 0x03, 0x1a, 0xd9, 0xd5, 0x16, 0xe8, 0x6c, 0x0f, 0xac, 0xb4,
	0x6a, 0x74, 0xbd, 0xa8, 0xfd, 0x50, 0x85, 0x35, 0x73, 0x40, 0xc7, 0xb0, 0xbe, 0xe6, 0x02, 0xcd,
	0xdd, 0x0d, 0x33, 0x1e, 0xea, 0xc0, 0x43, 0xed, 0x36, 0xf1, 0x03, 0x49, 0xbe, 0xce, 0x08, 0x1b,
	0x12, 0x7b, 0x4b, 0x73, 0x74, 0xca, 0x85, 0x7f, 0x95, 0x55, 0xd1, 0x29, 0x6c, 0x6a, 0x26, 0x9f,
	0x29, 0x31, 0x53, 0x01, 0x65, 0x11, 0x59, 0x64, 0xd1, 0x07, 0x29, 0x70, 0xa9, 0xeb, 0xbd, 0xb4,
	0x8c, 0x3e, 0xc0, 0xbd, 0x2c, 0x72, 0xc8, 0xd9, 0x88, 0xc6, 0xf6, 0xb6, 0x6e, 0x93, 0xf3, 0xbf,
	0x87, 0xbe, 0xd3, 0xac, 0xe2, 0x73, 0xad, 0xb0, 0x00, 0xa0, 0x73, 0xd8, 0x50, 0xfc, 0x0b, 0x61,
	0x81, 0xc0, 0x34, 0x91, 0xf6, 0x13, 0xdd, 0xb6, 0xe3, 0xb2, 0xdb, 0xa7, 0x94, 0xd4, 0xc7, 0x34,
	0x29, 0x5a, 0x41, 0x95, 0x57, 0x25, 0x3a, 0x83, 0x48, 0x24, 0x7c, 0x4e, 0x58, 0x70, 0x43, 0xd5,
	0x38, 0x4a, 0xf0, 0x0d, 0x9e, 0x48, 0xbb, 0xd6, 0xaa, 0x76, 0xac, 0x41, 0xd3, 0x20, 0xd7, 0x6b,
	0x00, 0xbd, 0x87, 0x75, 0x91, 0x70, 0xc1, 0x65, 0xca, 0xda, 0xd1, 0xa9, 0x27, 0xe5, 0xd4, 0xeb,
	0x04, 0x0b, 0x41, 0x22, 0xd3, 0x80, 0x62, 0xf2, 0x5a, 0x8c, 0x3e, 0xc2, 0x46, 0x88, 0xd5, 0x70,
	0x1c, 0x50, 0x36, 0xe2, 0xd2, 0xde, 0xd5, 0x5e, 0x2f, 0x37, 0xf4, 0x23, 0x25, 0xf5, 0xd8, 0x88,
	0xa7, 0xd7, 0x28, 0x3b, 0xc2, 0x30, 0xc7, 0x65, 0xfb, 0x3b, 0x80, 0x7b, 0x8f, 0xa2, 0xd1, 0x73,
	0x68, 0x3d, 0x9a, 0x8e, 0x19, 0x76, 0x83, 0x17, 0x26, 0x73, 0x01, 0x0f, 0x32, 0x4a, 0x7e, 0x37,
	0x3d, 0xee, 0x8d, 0x7f, 0xc2, 0x72, 0xfc, 0xbe, 0xd1, 0xf6, 0x33, 0x69, 0xb7, 0x77, 0xb7, 0x74,
	0xc0, 0xfd, 0xd2, 0x01, 0x0f, 0x4b, 0x07, 0xfc, 0x58, 0x39, 0x95, 0xfb, 0x95, 0x53, 0xf9, 0xb5,
	0x72, 0x2a, 0x9f, 0xbd, 0x98, 0xaa, 0xf1, 0x2c, 0x74, 0x87, 0x7c, 0xea, 0xa5, 0xb6, 0x14, 0x9f,
	0x4d, 0x70, 0x28, 0xbd, 0xcb, 0xbe, 0xde, 0xb3, 0xb9, 0xef, 0x2d, 0xf2, 0x65, 0xd3, 0x9b, 0x16,
	0xd6, 0xf4, 0xaa, 0xbd, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x77, 0xa3, 0xd4, 0x20, 0xe5, 0x03,
	0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextBridgeId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextBridgeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bridges) > 0 {
		for iNdEx := len(m.Bridges) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bridges[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Bridge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bridge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bridge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchInfos) > 0 {
		for iNdEx := len(m.BatchInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ProvenWithdrawals) > 0 {
		for iNdEx := len(m.ProvenWithdrawals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ProvenWithdrawals[iNdEx])
			copy(dAtA[i:], m.ProvenWithdrawals[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.ProvenWithdrawals[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.TokenPairs) > 0 {
		for iNdEx := len(m.TokenPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	{
		size, err := m.BridgeConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.NextOutputIndex != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextOutputIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.NextL1Sequence != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextL1Sequence))
		i--
		dAtA[i] = 0x10
	}
	if m.BridgeId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BridgeId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WrappedOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WrappedOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WrappedOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutputProposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OutputIndex != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OutputIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Bridges) > 0 {
		for _, e := range m.Bridges {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.NextBridgeId != 0 {
		n += 1 + sovGenesis(uint64(m.NextBridgeId))
	}
	return n
}

func (m *Bridge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeId != 0 {
		n += 1 + sovGenesis(uint64(m.BridgeId))
	}
	if m.NextL1Sequence != 0 {
		n += 1 + sovGenesis(uint64(m.NextL1Sequence))
	}
	if m.NextOutputIndex != 0 {
		n += 1 + sovGenesis(uint64(m.NextOutputIndex))
	}
	l = m.BridgeConfig.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.TokenPairs) > 0 {
		for _, e := range m.TokenPairs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ProvenWithdrawals) > 0 {
		for _, b := range m.ProvenWithdrawals {
			l = len(b)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Proposals) > 0 {
		for _, e := range m.Proposals {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchInfos) > 0 {
		for _, e := range m.BatchInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *WrappedOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutputIndex != 0 {
		n += 1 + sovGenesis(uint64(m.OutputIndex))
	}
	l = m.OutputProposal.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bridges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bridges = append(m.Bridges, Bridge{})
			if err := m.Bridges[len(m.Bridges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextBridgeId", wireType)
			}
			m.NextBridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextBridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bridge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bridge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bridge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
			}
			m.BridgeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextL1Sequence", wireType)
			}
			m.NextL1Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextL1Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOutputIndex", wireType)
			}
			m.NextOutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextOutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPairs = append(m.TokenPairs, TokenPair{})
			if err := m.TokenPairs[len(m.TokenPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProvenWithdrawals", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProvenWithdrawals = append(m.ProvenWithdrawals, make([]byte, postIndex-iNdEx))
			copy(m.ProvenWithdrawals[len(m.ProvenWithdrawals)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, WrappedOutput{})
			if err := m.Proposals[len(m.Proposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchInfos = append(m.BatchInfos, BatchInfoWithOutput{})
			if err := m.BatchInfos[len(m.BatchInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WrappedOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WrappedOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WrappedOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
			}
			m.OutputIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutputIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutputProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
