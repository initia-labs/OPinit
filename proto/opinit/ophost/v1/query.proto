syntax = "proto3";
package opinit.ophost.v1;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/query/v1/query.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "opinit/ophost/v1/types.proto";

option go_package = "github.com/initia-labs/OPinit/x/ophost/types";

// Query defines the gRPC querier service.
service Query {
  // Bridge queries bridge info.
  rpc Bridge(QueryBridgeRequest) returns (QueryBridgeResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/opinit/ophost/v1/bridges/{bridge_id}";
  }

  // Bridges queries bridge infos.
  rpc Bridges(QueryBridgesRequest) returns (QueryBridgesResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/opinit/ophost/v1/bridges";
  }

  // TokenPairByL1Denom queries token pair by l1 denom.
  rpc TokenPairByL1Denom(QueryTokenPairByL1DenomRequest) returns (QueryTokenPairByL1DenomResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/opinit/ophost/v1/bridges/{bridge_id}/token_pairs/by_l1_denom";
  }

  // TokenPairByL2Denom queries token pair by l2 denom.
  rpc TokenPairByL2Denom(QueryTokenPairByL2DenomRequest) returns (QueryTokenPairByL2DenomResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/opinit/ophost/v1/bridges/{bridge_id}/token_pairs/by_l2_denom";
  }

  // TokenPairs queries all (l1 denom, l2 denom) pair.
  rpc TokenPairs(QueryTokenPairsRequest) returns (QueryTokenPairsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/opinit/ophost/v1/bridges/{bridge_id}/token_pairs";
  }

  rpc LastFinalizedOutput(QueryLastFinalizedOutputRequest) returns (QueryLastFinalizedOutputResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/opinit/ophost/v1/bridges/{bridge_id}/last_finalized_output";
  }

  // OutputProposal queries output proposal by output index.
  rpc OutputProposal(QueryOutputProposalRequest) returns (QueryOutputProposalResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/opinit/ophost/v1/bridges/{bridge_id}/outputs/{output_index}";
  }

  // OutputProposals queries all output proposals.
  rpc OutputProposals(QueryOutputProposalsRequest) returns (QueryOutputProposalsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/opinit/ophost/v1/bridges/{bridge_id}/outputs";
  }

  // Parameters queries the rollup parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get               = "/opinit/ophost/v1/params";
  }

  // Claimed queries whether the output is claimed.
  rpc Claimed(QueryClaimedRequest) returns (QueryClaimedResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/opinit/ophost/v1/bridges/{bridge_id}/withdrawals/{withdrawal_hash}/claimed";
  }
}

// QueryBridgeRequest is request type for Query/Bridge RPC method.
message QueryBridgeRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  uint64 bridge_id = 1;
}

// QueryBridgeResponse is response type for the Query/Bridge RPC method
message QueryBridgeResponse {
  uint64       bridge_id     = 1;
  string       bridge_addr   = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  BridgeConfig bridge_config = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryBridgesRequest is request type for Query/Bridges RPC method.
message QueryBridgesRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // pagination defines the pagination in the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryBridgesResponse is response type for the Query/Bridges RPC method
message QueryBridgesResponse {
  repeated QueryBridgeResponse bridges = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryTokenPairByL1DenomRequest is response type for the Query/TokenPairByL1Denom RPC method
message QueryTokenPairByL1DenomRequest {
  uint64 bridge_id = 1;
  string l1_denom  = 2;
}

// QueryTokenPairByL1DenomResponse is response type for the Query/TokenPairByL1Denom RPC method
message QueryTokenPairByL1DenomResponse {
  TokenPair token_pair = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryTokenPairByL2DenomRequest is response type for the Query/TokenPairByL2Denom RPC method
message QueryTokenPairByL2DenomRequest {
  uint64 bridge_id = 1;
  string l2_denom  = 2;
}

// QueryTokenPairByL2DenomResponse is response type for the Query/TokenPairByL2Denom RPC method
message QueryTokenPairByL2DenomResponse {
  TokenPair token_pair = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryTokenPairsRequest is response type for the Query/TokenPairs RPC method
message QueryTokenPairsRequest {
  uint64 bridge_id = 1;

  // pagination defines the pagination in the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryTokenPairsResponse is response type for the Query/TokenPairs RPC method
message QueryTokenPairsResponse {
  repeated TokenPair token_pairs = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryLastFinalizedOutputRequest {
  uint64 bridge_id = 1;
}

message QueryLastFinalizedOutputResponse {
  uint64 output_index    = 1;
  Output output_proposal = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryOutputProposalRequest is response type for the Query/OutputProposal RPC method
message QueryOutputProposalRequest {
  uint64 bridge_id    = 1;
  uint64 output_index = 2;
}

// QueryOutputProposalResponse is response type for the Query/OutputProposal RPC method
message QueryOutputProposalResponse {
  uint64 bridge_id       = 1;
  uint64 output_index    = 2;
  Output output_proposal = 3 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryOutputProposalsRequest is response type for the Query/OutputProposals RPC method
message QueryOutputProposalsRequest {
  uint64 bridge_id    = 1;
  uint64 output_index = 2;
  // pagination defines the pagination in the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

// QueryOutputProposalsResponse is response type for the Query/OutputProposals RPC method
message QueryOutputProposalsResponse {
  repeated QueryOutputProposalResponse output_proposals = 1
      [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// QueryClaimedRequest is request type for the Query/Claimed RPC method.
message QueryClaimedRequest {
  uint64 bridge_id       = 1;
  bytes  withdrawal_hash = 2;
}

// QueryClaimedResponse is response type for the Query/Claimed RPC method
message QueryClaimedResponse {
  bool claimed = 1;
}
