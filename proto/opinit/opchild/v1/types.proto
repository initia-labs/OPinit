syntax = "proto3";
package opinit.opchild.v1;

import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "tendermint/abci/types.proto";
import "opinit/ophost/v1/types.proto";

option go_package                      = "github.com/initia-labs/OPinit/x/opchild/types";
option (gogoproto.equal_all)           = true;
option (gogoproto.goproto_getters_all) = false;

// Params defines the set of opchild parameters.
message Params {
  option (amino.name)                 = "opchild/Params";
  option (gogoproto.equal)            = true;
  option (gogoproto.goproto_stringer) = false;

  // max_validators is the maximum number of validators.
  uint32 max_validators = 1 [(gogoproto.moretags) = "yaml:\"max_validators\""];
  // historical_entries is the number of historical entries to persist.
  uint32   historical_entries                         = 2 [(gogoproto.moretags) = "yaml:\"historical_entries\""];
  repeated cosmos.base.v1beta1.DecCoin min_gas_prices = 3 [
    (gogoproto.moretags)     = "yaml:\"min_gas_price\"",
    (gogoproto.nullable)     = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"
  ];
  // the account address of bridge executor who can execute permissioned bridge
  // messages.
  repeated string bridge_executors = 4 [
    (cosmos_proto.scalar)  = "cosmos.AddressString",
    (amino.dont_omitempty) = true,
    (gogoproto.moretags)   = "yaml:\"bridge_executors\""
  ];
  // the account address of admin who can execute permissioned cosmos messages.
  string admin = 5 [
    (cosmos_proto.scalar)  = "cosmos.AddressString",
    (amino.dont_omitempty) = true,
    (gogoproto.moretags)   = "yaml:\"admin\""
  ];
  // the list of addresses that are allowed to pay zero fee.
  repeated string fee_whitelist = 6 [
    (cosmos_proto.scalar)  = "cosmos.AddressString",
    (amino.dont_omitempty) = true,
    (gogoproto.moretags)   = "yaml:\"fee_whitelist\""
  ];
}

// Validator defines a validator, together with the total amount of the
// Validator's bond shares and their exchange rate to coins. Slashing results in
// a decrease in the exchange rate, allowing correct calculation of future
// undelegations without iterating over delegators. When coins are delegated to
// this validator, the validator is credited with a delegation whose number of
// bond shares is based on the amount of coins delegated divided by the current
// exchange rate. Voting power can be calculated as total bonded shares
// multiplied by exchange rate.
message Validator {
  option (gogoproto.equal)            = false;
  option (gogoproto.goproto_stringer) = false;
  option (gogoproto.goproto_getters)  = false;

  string moniker = 1 [(gogoproto.moretags) = "yaml:\"moniker\""];
  // operator_address defines the address of the validator's operator;
  // bech encoded in JSON.
  string operator_address = 2 [(gogoproto.moretags) = "yaml:\"operator_address\""];
  // consensus_pubkey is the consensus public key of the validator,
  // as a Protobuf Any.
  google.protobuf.Any consensus_pubkey = 3
      [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey", (gogoproto.moretags) = "yaml:\"consensus_pubkey\""];
  int64 cons_power = 4 [(gogoproto.moretags) = "yaml:\"cons_power\""];
}

// ValidatorUpdates defines an array of abci.ValidatorUpdate objects.
// TODO: explore moving this to proto/cosmos/base to separate modules
// from tendermint dependence
message ValidatorUpdates {
  option (gogoproto.equal) = false;

  repeated tendermint.abci.ValidatorUpdate updates = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// BridgeInfo defines the information of the bridge.
message BridgeInfo {
  // bridge id is the unique identifier of the bridge which is assigned from l1.
  uint64 bridge_id = 1;

  // bridge_addr is the address of the bridge on l1.
  string bridge_addr = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // l1_chain_id is the chain id of the l1 chain.
  string l1_chain_id = 3;

  // l1_client_id is the IBC client ID, which is allocated for l1 chain, in l2 chain state.
  // This is used to verify the validator set in oracle update messages.
  string l1_client_id = 4;

  // bridge_config is the configuration of the bridge.
  opinit.ophost.v1.BridgeConfig bridge_config = 5 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// PendingDeposits defines the set of pending deposits.
message PendingDeposits {
  // recipient is the address of the recipient.
  string recipient = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // coins is a list of coins to be deposited.
  repeated cosmos.base.v1beta1.Coin coins = 2 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// CoinsWrapper defines the set of coins.
message CoinsWrapper {
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

// ResponseResultType defines the possible outcomes of the execution of a message
enum ResponseResultType {
  option (gogoproto.goproto_enum_prefix) = false;

  // Default zero value enumeration
  RESPONSE_RESULT_TYPE_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "UNSPECIFIED"];
  // The message did not execute msg operation (because, for example, deposit had already been finalized)
  RESPONSE_RESULT_TYPE_NOOP = 1 [(gogoproto.enumvalue_customname) = "NOOP"];
  // The message was executed successfully
  RESPONSE_RESULT_TYPE_SUCCESS = 2 [(gogoproto.enumvalue_customname) = "SUCCESS"];
}