// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: opinit/opchild/v1/tx.proto

package opchildv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_ExecuteMessages_FullMethodName             = "/opinit.opchild.v1.Msg/ExecuteMessages"
	Msg_SetBridgeInfo_FullMethodName               = "/opinit.opchild.v1.Msg/SetBridgeInfo"
	Msg_FinalizeTokenDeposit_FullMethodName        = "/opinit.opchild.v1.Msg/FinalizeTokenDeposit"
	Msg_InitiateTokenWithdrawal_FullMethodName     = "/opinit.opchild.v1.Msg/InitiateTokenWithdrawal"
	Msg_UpdateSequencer_FullMethodName             = "/opinit.opchild.v1.Msg/UpdateSequencer"
	Msg_AddAttestor_FullMethodName                 = "/opinit.opchild.v1.Msg/AddAttestor"
	Msg_RemoveAttestor_FullMethodName              = "/opinit.opchild.v1.Msg/RemoveAttestor"
	Msg_AddFeeWhitelistAddresses_FullMethodName    = "/opinit.opchild.v1.Msg/AddFeeWhitelistAddresses"
	Msg_RemoveFeeWhitelistAddresses_FullMethodName = "/opinit.opchild.v1.Msg/RemoveFeeWhitelistAddresses"
	Msg_AddBridgeExecutor_FullMethodName           = "/opinit.opchild.v1.Msg/AddBridgeExecutor"
	Msg_RemoveBridgeExecutor_FullMethodName        = "/opinit.opchild.v1.Msg/RemoveBridgeExecutor"
	Msg_UpdateMinGasPrices_FullMethodName          = "/opinit.opchild.v1.Msg/UpdateMinGasPrices"
	Msg_UpdateAdmin_FullMethodName                 = "/opinit.opchild.v1.Msg/UpdateAdmin"
	Msg_UpdateParams_FullMethodName                = "/opinit.opchild.v1.Msg/UpdateParams"
	Msg_SpendFeePool_FullMethodName                = "/opinit.opchild.v1.Msg/SpendFeePool"
	Msg_UpdateOracle_FullMethodName                = "/opinit.opchild.v1.Msg/UpdateOracle"
	Msg_RegisterMigrationInfo_FullMethodName       = "/opinit.opchild.v1.Msg/RegisterMigrationInfo"
	Msg_MigrateToken_FullMethodName                = "/opinit.opchild.v1.Msg/MigrateToken"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	// ExecuteMessages defines a rpc handler method for MsgExecuteMessages.
	ExecuteMessages(ctx context.Context, in *MsgExecuteMessages, opts ...grpc.CallOption) (*MsgExecuteMessagesResponse, error)
	// SetBridgeInfo defines a rpc handler method for MsgSetBridgeInfo.
	SetBridgeInfo(ctx context.Context, in *MsgSetBridgeInfo, opts ...grpc.CallOption) (*MsgSetBridgeInfoResponse, error)
	// FinalizeTokenDeposit defines a rpc handler method for MsgFinalizeTokenDeposit.
	FinalizeTokenDeposit(ctx context.Context, in *MsgFinalizeTokenDeposit, opts ...grpc.CallOption) (*MsgFinalizeTokenDepositResponse, error)
	// InitiateTokenWithdrawal defines a user facing l2 => l1 token transfer interface.
	InitiateTokenWithdrawal(ctx context.Context, in *MsgInitiateTokenWithdrawal, opts ...grpc.CallOption) (*MsgInitiateTokenWithdrawalResponse, error)
	// UpdateSequencer defines a rpc handler method for MsgUpdateSequencer.
	UpdateSequencer(ctx context.Context, in *MsgUpdateSequencer, opts ...grpc.CallOption) (*MsgUpdateSequencerResponse, error)
	// AddAttestor defines a rpc handler method for MsgAddAttestor.
	AddAttestor(ctx context.Context, in *MsgAddAttestor, opts ...grpc.CallOption) (*MsgAddAttestorResponse, error)
	// RemoveAttestor defines a rpc handler method for MsgRemoveAttestor.
	RemoveAttestor(ctx context.Context, in *MsgRemoveAttestor, opts ...grpc.CallOption) (*MsgRemoveAttestorResponse, error)
	// AddFeeWhitelistAddresses defines an authorized operation for adding addresses to x/opchild fee whitelist.
	AddFeeWhitelistAddresses(ctx context.Context, in *MsgAddFeeWhitelistAddresses, opts ...grpc.CallOption) (*MsgAddFeeWhitelistAddressesResponse, error)
	// RemoveFeeWhitelistAddresses defines an authorized operation for removing addresses from x/opchild
	// fee whitelist.
	RemoveFeeWhitelistAddresses(ctx context.Context, in *MsgRemoveFeeWhitelistAddresses, opts ...grpc.CallOption) (*MsgRemoveFeeWhitelistAddressesResponse, error)
	// AddBridgeExecutor defines an authorized operation for adding addresses to x/opchild bridge executors
	AddBridgeExecutor(ctx context.Context, in *MsgAddBridgeExecutor, opts ...grpc.CallOption) (*MsgAddBridgeExecutorResponse, error)
	// RemoveBridgeExecutor defines an authorized operation for removing addresses from x/opchild
	// bridge executors.
	RemoveBridgeExecutor(ctx context.Context, in *MsgRemoveBridgeExecutor, opts ...grpc.CallOption) (*MsgRemoveBridgeExecutorResponse, error)
	// UpdateMinGasPrices defines an authorized operation for updating the min gas prices parameter
	UpdateMinGasPrices(ctx context.Context, in *MsgUpdateMinGasPrices, opts ...grpc.CallOption) (*MsgUpdateMinGasPricesResponse, error)
	// UpdateAdmin defines an authorized operation for updating the x/opchild admin
	UpdateAdmin(ctx context.Context, in *MsgUpdateAdmin, opts ...grpc.CallOption) (*MsgUpdateAdminResponse, error)
	// UpdateParams defines an operation for updating the
	// x/opchild module parameters.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// SpendFeePool defines an operation that spend fee pool to a recipient.
	SpendFeePool(ctx context.Context, in *MsgSpendFeePool, opts ...grpc.CallOption) (*MsgSpendFeePoolResponse, error)
	// UpdateOracle defines an operation that update oracle prices.
	UpdateOracle(ctx context.Context, in *MsgUpdateOracle, opts ...grpc.CallOption) (*MsgUpdateOracleResponse, error)
	// RegisterMigrationInfo defines an operation that register the migration information.
	RegisterMigrationInfo(ctx context.Context, in *MsgRegisterMigrationInfo, opts ...grpc.CallOption) (*MsgRegisterMigrationInfoResponse, error)
	// MigrateToken defines an operation that migrate the origin OP token to registered IBC token.
	MigrateToken(ctx context.Context, in *MsgMigrateToken, opts ...grpc.CallOption) (*MsgMigrateTokenResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ExecuteMessages(ctx context.Context, in *MsgExecuteMessages, opts ...grpc.CallOption) (*MsgExecuteMessagesResponse, error) {
	out := new(MsgExecuteMessagesResponse)
	err := c.cc.Invoke(ctx, Msg_ExecuteMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBridgeInfo(ctx context.Context, in *MsgSetBridgeInfo, opts ...grpc.CallOption) (*MsgSetBridgeInfoResponse, error) {
	out := new(MsgSetBridgeInfoResponse)
	err := c.cc.Invoke(ctx, Msg_SetBridgeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinalizeTokenDeposit(ctx context.Context, in *MsgFinalizeTokenDeposit, opts ...grpc.CallOption) (*MsgFinalizeTokenDepositResponse, error) {
	out := new(MsgFinalizeTokenDepositResponse)
	err := c.cc.Invoke(ctx, Msg_FinalizeTokenDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) InitiateTokenWithdrawal(ctx context.Context, in *MsgInitiateTokenWithdrawal, opts ...grpc.CallOption) (*MsgInitiateTokenWithdrawalResponse, error) {
	out := new(MsgInitiateTokenWithdrawalResponse)
	err := c.cc.Invoke(ctx, Msg_InitiateTokenWithdrawal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSequencer(ctx context.Context, in *MsgUpdateSequencer, opts ...grpc.CallOption) (*MsgUpdateSequencerResponse, error) {
	out := new(MsgUpdateSequencerResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateSequencer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddAttestor(ctx context.Context, in *MsgAddAttestor, opts ...grpc.CallOption) (*MsgAddAttestorResponse, error) {
	out := new(MsgAddAttestorResponse)
	err := c.cc.Invoke(ctx, Msg_AddAttestor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAttestor(ctx context.Context, in *MsgRemoveAttestor, opts ...grpc.CallOption) (*MsgRemoveAttestorResponse, error) {
	out := new(MsgRemoveAttestorResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveAttestor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddFeeWhitelistAddresses(ctx context.Context, in *MsgAddFeeWhitelistAddresses, opts ...grpc.CallOption) (*MsgAddFeeWhitelistAddressesResponse, error) {
	out := new(MsgAddFeeWhitelistAddressesResponse)
	err := c.cc.Invoke(ctx, Msg_AddFeeWhitelistAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveFeeWhitelistAddresses(ctx context.Context, in *MsgRemoveFeeWhitelistAddresses, opts ...grpc.CallOption) (*MsgRemoveFeeWhitelistAddressesResponse, error) {
	out := new(MsgRemoveFeeWhitelistAddressesResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveFeeWhitelistAddresses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddBridgeExecutor(ctx context.Context, in *MsgAddBridgeExecutor, opts ...grpc.CallOption) (*MsgAddBridgeExecutorResponse, error) {
	out := new(MsgAddBridgeExecutorResponse)
	err := c.cc.Invoke(ctx, Msg_AddBridgeExecutor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveBridgeExecutor(ctx context.Context, in *MsgRemoveBridgeExecutor, opts ...grpc.CallOption) (*MsgRemoveBridgeExecutorResponse, error) {
	out := new(MsgRemoveBridgeExecutorResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveBridgeExecutor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMinGasPrices(ctx context.Context, in *MsgUpdateMinGasPrices, opts ...grpc.CallOption) (*MsgUpdateMinGasPricesResponse, error) {
	out := new(MsgUpdateMinGasPricesResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateMinGasPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAdmin(ctx context.Context, in *MsgUpdateAdmin, opts ...grpc.CallOption) (*MsgUpdateAdminResponse, error) {
	out := new(MsgUpdateAdminResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SpendFeePool(ctx context.Context, in *MsgSpendFeePool, opts ...grpc.CallOption) (*MsgSpendFeePoolResponse, error) {
	out := new(MsgSpendFeePoolResponse)
	err := c.cc.Invoke(ctx, Msg_SpendFeePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOracle(ctx context.Context, in *MsgUpdateOracle, opts ...grpc.CallOption) (*MsgUpdateOracleResponse, error) {
	out := new(MsgUpdateOracleResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateOracle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterMigrationInfo(ctx context.Context, in *MsgRegisterMigrationInfo, opts ...grpc.CallOption) (*MsgRegisterMigrationInfoResponse, error) {
	out := new(MsgRegisterMigrationInfoResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterMigrationInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MigrateToken(ctx context.Context, in *MsgMigrateToken, opts ...grpc.CallOption) (*MsgMigrateTokenResponse, error) {
	out := new(MsgMigrateTokenResponse)
	err := c.cc.Invoke(ctx, Msg_MigrateToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	// ExecuteMessages defines a rpc handler method for MsgExecuteMessages.
	ExecuteMessages(context.Context, *MsgExecuteMessages) (*MsgExecuteMessagesResponse, error)
	// SetBridgeInfo defines a rpc handler method for MsgSetBridgeInfo.
	SetBridgeInfo(context.Context, *MsgSetBridgeInfo) (*MsgSetBridgeInfoResponse, error)
	// FinalizeTokenDeposit defines a rpc handler method for MsgFinalizeTokenDeposit.
	FinalizeTokenDeposit(context.Context, *MsgFinalizeTokenDeposit) (*MsgFinalizeTokenDepositResponse, error)
	// InitiateTokenWithdrawal defines a user facing l2 => l1 token transfer interface.
	InitiateTokenWithdrawal(context.Context, *MsgInitiateTokenWithdrawal) (*MsgInitiateTokenWithdrawalResponse, error)
	// UpdateSequencer defines a rpc handler method for MsgUpdateSequencer.
	UpdateSequencer(context.Context, *MsgUpdateSequencer) (*MsgUpdateSequencerResponse, error)
	// AddAttestor defines a rpc handler method for MsgAddAttestor.
	AddAttestor(context.Context, *MsgAddAttestor) (*MsgAddAttestorResponse, error)
	// RemoveAttestor defines a rpc handler method for MsgRemoveAttestor.
	RemoveAttestor(context.Context, *MsgRemoveAttestor) (*MsgRemoveAttestorResponse, error)
	// AddFeeWhitelistAddresses defines an authorized operation for adding addresses to x/opchild fee whitelist.
	AddFeeWhitelistAddresses(context.Context, *MsgAddFeeWhitelistAddresses) (*MsgAddFeeWhitelistAddressesResponse, error)
	// RemoveFeeWhitelistAddresses defines an authorized operation for removing addresses from x/opchild
	// fee whitelist.
	RemoveFeeWhitelistAddresses(context.Context, *MsgRemoveFeeWhitelistAddresses) (*MsgRemoveFeeWhitelistAddressesResponse, error)
	// AddBridgeExecutor defines an authorized operation for adding addresses to x/opchild bridge executors
	AddBridgeExecutor(context.Context, *MsgAddBridgeExecutor) (*MsgAddBridgeExecutorResponse, error)
	// RemoveBridgeExecutor defines an authorized operation for removing addresses from x/opchild
	// bridge executors.
	RemoveBridgeExecutor(context.Context, *MsgRemoveBridgeExecutor) (*MsgRemoveBridgeExecutorResponse, error)
	// UpdateMinGasPrices defines an authorized operation for updating the min gas prices parameter
	UpdateMinGasPrices(context.Context, *MsgUpdateMinGasPrices) (*MsgUpdateMinGasPricesResponse, error)
	// UpdateAdmin defines an authorized operation for updating the x/opchild admin
	UpdateAdmin(context.Context, *MsgUpdateAdmin) (*MsgUpdateAdminResponse, error)
	// UpdateParams defines an operation for updating the
	// x/opchild module parameters.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// SpendFeePool defines an operation that spend fee pool to a recipient.
	SpendFeePool(context.Context, *MsgSpendFeePool) (*MsgSpendFeePoolResponse, error)
	// UpdateOracle defines an operation that update oracle prices.
	UpdateOracle(context.Context, *MsgUpdateOracle) (*MsgUpdateOracleResponse, error)
	// RegisterMigrationInfo defines an operation that register the migration information.
	RegisterMigrationInfo(context.Context, *MsgRegisterMigrationInfo) (*MsgRegisterMigrationInfoResponse, error)
	// MigrateToken defines an operation that migrate the origin OP token to registered IBC token.
	MigrateToken(context.Context, *MsgMigrateToken) (*MsgMigrateTokenResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) ExecuteMessages(context.Context, *MsgExecuteMessages) (*MsgExecuteMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteMessages not implemented")
}
func (UnimplementedMsgServer) SetBridgeInfo(context.Context, *MsgSetBridgeInfo) (*MsgSetBridgeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgeInfo not implemented")
}
func (UnimplementedMsgServer) FinalizeTokenDeposit(context.Context, *MsgFinalizeTokenDeposit) (*MsgFinalizeTokenDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeTokenDeposit not implemented")
}
func (UnimplementedMsgServer) InitiateTokenWithdrawal(context.Context, *MsgInitiateTokenWithdrawal) (*MsgInitiateTokenWithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTokenWithdrawal not implemented")
}
func (UnimplementedMsgServer) UpdateSequencer(context.Context, *MsgUpdateSequencer) (*MsgUpdateSequencerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSequencer not implemented")
}
func (UnimplementedMsgServer) AddAttestor(context.Context, *MsgAddAttestor) (*MsgAddAttestorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttestor not implemented")
}
func (UnimplementedMsgServer) RemoveAttestor(context.Context, *MsgRemoveAttestor) (*MsgRemoveAttestorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAttestor not implemented")
}
func (UnimplementedMsgServer) AddFeeWhitelistAddresses(context.Context, *MsgAddFeeWhitelistAddresses) (*MsgAddFeeWhitelistAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFeeWhitelistAddresses not implemented")
}
func (UnimplementedMsgServer) RemoveFeeWhitelistAddresses(context.Context, *MsgRemoveFeeWhitelistAddresses) (*MsgRemoveFeeWhitelistAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFeeWhitelistAddresses not implemented")
}
func (UnimplementedMsgServer) AddBridgeExecutor(context.Context, *MsgAddBridgeExecutor) (*MsgAddBridgeExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBridgeExecutor not implemented")
}
func (UnimplementedMsgServer) RemoveBridgeExecutor(context.Context, *MsgRemoveBridgeExecutor) (*MsgRemoveBridgeExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBridgeExecutor not implemented")
}
func (UnimplementedMsgServer) UpdateMinGasPrices(context.Context, *MsgUpdateMinGasPrices) (*MsgUpdateMinGasPricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMinGasPrices not implemented")
}
func (UnimplementedMsgServer) UpdateAdmin(context.Context, *MsgUpdateAdmin) (*MsgUpdateAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAdmin not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) SpendFeePool(context.Context, *MsgSpendFeePool) (*MsgSpendFeePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendFeePool not implemented")
}
func (UnimplementedMsgServer) UpdateOracle(context.Context, *MsgUpdateOracle) (*MsgUpdateOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOracle not implemented")
}
func (UnimplementedMsgServer) RegisterMigrationInfo(context.Context, *MsgRegisterMigrationInfo) (*MsgRegisterMigrationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMigrationInfo not implemented")
}
func (UnimplementedMsgServer) MigrateToken(context.Context, *MsgMigrateToken) (*MsgMigrateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateToken not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_ExecuteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ExecuteMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteMessages(ctx, req.(*MsgExecuteMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBridgeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBridgeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBridgeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetBridgeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBridgeInfo(ctx, req.(*MsgSetBridgeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinalizeTokenDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalizeTokenDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinalizeTokenDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_FinalizeTokenDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinalizeTokenDeposit(ctx, req.(*MsgFinalizeTokenDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_InitiateTokenWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInitiateTokenWithdrawal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InitiateTokenWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_InitiateTokenWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InitiateTokenWithdrawal(ctx, req.(*MsgInitiateTokenWithdrawal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSequencer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSequencer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSequencer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateSequencer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSequencer(ctx, req.(*MsgUpdateSequencer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddAttestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddAttestor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddAttestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddAttestor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddAttestor(ctx, req.(*MsgAddAttestor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAttestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAttestor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAttestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveAttestor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAttestor(ctx, req.(*MsgRemoveAttestor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddFeeWhitelistAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddFeeWhitelistAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddFeeWhitelistAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddFeeWhitelistAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddFeeWhitelistAddresses(ctx, req.(*MsgAddFeeWhitelistAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveFeeWhitelistAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveFeeWhitelistAddresses)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveFeeWhitelistAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveFeeWhitelistAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveFeeWhitelistAddresses(ctx, req.(*MsgRemoveFeeWhitelistAddresses))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddBridgeExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddBridgeExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddBridgeExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddBridgeExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddBridgeExecutor(ctx, req.(*MsgAddBridgeExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveBridgeExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveBridgeExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveBridgeExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveBridgeExecutor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveBridgeExecutor(ctx, req.(*MsgRemoveBridgeExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMinGasPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMinGasPrices)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMinGasPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateMinGasPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMinGasPrices(ctx, req.(*MsgUpdateMinGasPrices))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAdmin(ctx, req.(*MsgUpdateAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SpendFeePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSpendFeePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SpendFeePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SpendFeePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SpendFeePool(ctx, req.(*MsgSpendFeePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOracle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateOracle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOracle(ctx, req.(*MsgUpdateOracle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterMigrationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterMigrationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterMigrationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterMigrationInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterMigrationInfo(ctx, req.(*MsgRegisterMigrationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MigrateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMigrateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MigrateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_MigrateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MigrateToken(ctx, req.(*MsgMigrateToken))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opinit.opchild.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteMessages",
			Handler:    _Msg_ExecuteMessages_Handler,
		},
		{
			MethodName: "SetBridgeInfo",
			Handler:    _Msg_SetBridgeInfo_Handler,
		},
		{
			MethodName: "FinalizeTokenDeposit",
			Handler:    _Msg_FinalizeTokenDeposit_Handler,
		},
		{
			MethodName: "InitiateTokenWithdrawal",
			Handler:    _Msg_InitiateTokenWithdrawal_Handler,
		},
		{
			MethodName: "UpdateSequencer",
			Handler:    _Msg_UpdateSequencer_Handler,
		},
		{
			MethodName: "AddAttestor",
			Handler:    _Msg_AddAttestor_Handler,
		},
		{
			MethodName: "RemoveAttestor",
			Handler:    _Msg_RemoveAttestor_Handler,
		},
		{
			MethodName: "AddFeeWhitelistAddresses",
			Handler:    _Msg_AddFeeWhitelistAddresses_Handler,
		},
		{
			MethodName: "RemoveFeeWhitelistAddresses",
			Handler:    _Msg_RemoveFeeWhitelistAddresses_Handler,
		},
		{
			MethodName: "AddBridgeExecutor",
			Handler:    _Msg_AddBridgeExecutor_Handler,
		},
		{
			MethodName: "RemoveBridgeExecutor",
			Handler:    _Msg_RemoveBridgeExecutor_Handler,
		},
		{
			MethodName: "UpdateMinGasPrices",
			Handler:    _Msg_UpdateMinGasPrices_Handler,
		},
		{
			MethodName: "UpdateAdmin",
			Handler:    _Msg_UpdateAdmin_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "SpendFeePool",
			Handler:    _Msg_SpendFeePool_Handler,
		},
		{
			MethodName: "UpdateOracle",
			Handler:    _Msg_UpdateOracle_Handler,
		},
		{
			MethodName: "RegisterMigrationInfo",
			Handler:    _Msg_RegisterMigrationInfo_Handler,
		},
		{
			MethodName: "MigrateToken",
			Handler:    _Msg_MigrateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opinit/opchild/v1/tx.proto",
}
