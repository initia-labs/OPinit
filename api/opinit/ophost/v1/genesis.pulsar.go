// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package ophostv1

import (
	_ "cosmossdk.io/api/amino"
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_GenesisState_2_list)(nil)

type _GenesisState_2_list struct {
	list *[]*Bridge
}

func (x *_GenesisState_2_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_GenesisState_2_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_GenesisState_2_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Bridge)
	(*x.list)[i] = concreteValue
}

func (x *_GenesisState_2_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Bridge)
	*x.list = append(*x.list, concreteValue)
}

func (x *_GenesisState_2_list) AppendMutable() protoreflect.Value {
	v := new(Bridge)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_2_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_GenesisState_2_list) NewElement() protoreflect.Value {
	v := new(Bridge)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_GenesisState_2_list) IsValid() bool {
	return x.list != nil
}

var (
	md_GenesisState                protoreflect.MessageDescriptor
	fd_GenesisState_params         protoreflect.FieldDescriptor
	fd_GenesisState_bridges        protoreflect.FieldDescriptor
	fd_GenesisState_next_bridge_id protoreflect.FieldDescriptor
)

func init() {
	file_opinit_ophost_v1_genesis_proto_init()
	md_GenesisState = File_opinit_ophost_v1_genesis_proto.Messages().ByName("GenesisState")
	fd_GenesisState_params = md_GenesisState.Fields().ByName("params")
	fd_GenesisState_bridges = md_GenesisState.Fields().ByName("bridges")
	fd_GenesisState_next_bridge_id = md_GenesisState.Fields().ByName("next_bridge_id")
}

var _ protoreflect.Message = (*fastReflection_GenesisState)(nil)

type fastReflection_GenesisState GenesisState

func (x *GenesisState) ProtoReflect() protoreflect.Message {
	return (*fastReflection_GenesisState)(x)
}

func (x *GenesisState) slowProtoReflect() protoreflect.Message {
	mi := &file_opinit_ophost_v1_genesis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_GenesisState_messageType fastReflection_GenesisState_messageType
var _ protoreflect.MessageType = fastReflection_GenesisState_messageType{}

type fastReflection_GenesisState_messageType struct{}

func (x fastReflection_GenesisState_messageType) Zero() protoreflect.Message {
	return (*fastReflection_GenesisState)(nil)
}
func (x fastReflection_GenesisState_messageType) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}
func (x fastReflection_GenesisState_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_GenesisState) Descriptor() protoreflect.MessageDescriptor {
	return md_GenesisState
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_GenesisState) Type() protoreflect.MessageType {
	return _fastReflection_GenesisState_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_GenesisState) New() protoreflect.Message {
	return new(fastReflection_GenesisState)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_GenesisState) Interface() protoreflect.ProtoMessage {
	return (*GenesisState)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_GenesisState) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Params != nil {
		value := protoreflect.ValueOfMessage(x.Params.ProtoReflect())
		if !f(fd_GenesisState_params, value) {
			return
		}
	}
	if len(x.Bridges) != 0 {
		value := protoreflect.ValueOfList(&_GenesisState_2_list{list: &x.Bridges})
		if !f(fd_GenesisState_bridges, value) {
			return
		}
	}
	if x.NextBridgeId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NextBridgeId)
		if !f(fd_GenesisState_next_bridge_id, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_GenesisState) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "opinit.ophost.v1.GenesisState.params":
		return x.Params != nil
	case "opinit.ophost.v1.GenesisState.bridges":
		return len(x.Bridges) != 0
	case "opinit.ophost.v1.GenesisState.next_bridge_id":
		return x.NextBridgeId != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.GenesisState"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "opinit.ophost.v1.GenesisState.params":
		x.Params = nil
	case "opinit.ophost.v1.GenesisState.bridges":
		x.Bridges = nil
	case "opinit.ophost.v1.GenesisState.next_bridge_id":
		x.NextBridgeId = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.GenesisState"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_GenesisState) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "opinit.ophost.v1.GenesisState.params":
		value := x.Params
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "opinit.ophost.v1.GenesisState.bridges":
		if len(x.Bridges) == 0 {
			return protoreflect.ValueOfList(&_GenesisState_2_list{})
		}
		listValue := &_GenesisState_2_list{list: &x.Bridges}
		return protoreflect.ValueOfList(listValue)
	case "opinit.ophost.v1.GenesisState.next_bridge_id":
		value := x.NextBridgeId
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.GenesisState"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.GenesisState does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "opinit.ophost.v1.GenesisState.params":
		x.Params = value.Message().Interface().(*Params)
	case "opinit.ophost.v1.GenesisState.bridges":
		lv := value.List()
		clv := lv.(*_GenesisState_2_list)
		x.Bridges = *clv.list
	case "opinit.ophost.v1.GenesisState.next_bridge_id":
		x.NextBridgeId = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.GenesisState"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "opinit.ophost.v1.GenesisState.params":
		if x.Params == nil {
			x.Params = new(Params)
		}
		return protoreflect.ValueOfMessage(x.Params.ProtoReflect())
	case "opinit.ophost.v1.GenesisState.bridges":
		if x.Bridges == nil {
			x.Bridges = []*Bridge{}
		}
		value := &_GenesisState_2_list{list: &x.Bridges}
		return protoreflect.ValueOfList(value)
	case "opinit.ophost.v1.GenesisState.next_bridge_id":
		panic(fmt.Errorf("field next_bridge_id of message opinit.ophost.v1.GenesisState is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.GenesisState"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_GenesisState) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "opinit.ophost.v1.GenesisState.params":
		m := new(Params)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "opinit.ophost.v1.GenesisState.bridges":
		list := []*Bridge{}
		return protoreflect.ValueOfList(&_GenesisState_2_list{list: &list})
	case "opinit.ophost.v1.GenesisState.next_bridge_id":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.GenesisState"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.GenesisState does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_GenesisState) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in opinit.ophost.v1.GenesisState", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_GenesisState) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_GenesisState) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_GenesisState) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_GenesisState) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Params != nil {
			l = options.Size(x.Params)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.Bridges) > 0 {
			for _, e := range x.Bridges {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.NextBridgeId != 0 {
			n += 1 + runtime.Sov(uint64(x.NextBridgeId))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.NextBridgeId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NextBridgeId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.Bridges) > 0 {
			for iNdEx := len(x.Bridges) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Bridges[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x12
			}
		}
		if x.Params != nil {
			encoded, err := options.Marshal(x.Params)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*GenesisState)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Params == nil {
					x.Params = &Params{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Params); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bridges", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Bridges = append(x.Bridges, &Bridge{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Bridges[len(x.Bridges)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NextBridgeId", wireType)
				}
				x.NextBridgeId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NextBridgeId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_Bridge_5_list)(nil)

type _Bridge_5_list struct {
	list *[]*TokenPair
}

func (x *_Bridge_5_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Bridge_5_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Bridge_5_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TokenPair)
	(*x.list)[i] = concreteValue
}

func (x *_Bridge_5_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*TokenPair)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Bridge_5_list) AppendMutable() protoreflect.Value {
	v := new(TokenPair)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Bridge_5_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Bridge_5_list) NewElement() protoreflect.Value {
	v := new(TokenPair)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Bridge_5_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Bridge_6_list)(nil)

type _Bridge_6_list struct {
	list *[][]byte
}

func (x *_Bridge_6_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Bridge_6_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfBytes((*x.list)[i])
}

func (x *_Bridge_6_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Bridge_6_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Bytes()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Bridge_6_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Bridge at list field ProvenWithdrawals as it is not of Message kind"))
}

func (x *_Bridge_6_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Bridge_6_list) NewElement() protoreflect.Value {
	var v []byte
	return protoreflect.ValueOfBytes(v)
}

func (x *_Bridge_6_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Bridge_7_list)(nil)

type _Bridge_7_list struct {
	list *[]*WrappedOutput
}

func (x *_Bridge_7_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Bridge_7_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Bridge_7_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*WrappedOutput)
	(*x.list)[i] = concreteValue
}

func (x *_Bridge_7_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*WrappedOutput)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Bridge_7_list) AppendMutable() protoreflect.Value {
	v := new(WrappedOutput)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Bridge_7_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Bridge_7_list) NewElement() protoreflect.Value {
	v := new(WrappedOutput)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Bridge_7_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Bridge_8_list)(nil)

type _Bridge_8_list struct {
	list *[]*BatchInfoWithOutput
}

func (x *_Bridge_8_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Bridge_8_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Bridge_8_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BatchInfoWithOutput)
	(*x.list)[i] = concreteValue
}

func (x *_Bridge_8_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*BatchInfoWithOutput)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Bridge_8_list) AppendMutable() protoreflect.Value {
	v := new(BatchInfoWithOutput)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Bridge_8_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Bridge_8_list) NewElement() protoreflect.Value {
	v := new(BatchInfoWithOutput)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Bridge_8_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Bridge                    protoreflect.MessageDescriptor
	fd_Bridge_bridge_id          protoreflect.FieldDescriptor
	fd_Bridge_next_l1_sequence   protoreflect.FieldDescriptor
	fd_Bridge_next_output_index  protoreflect.FieldDescriptor
	fd_Bridge_bridge_config      protoreflect.FieldDescriptor
	fd_Bridge_token_pairs        protoreflect.FieldDescriptor
	fd_Bridge_proven_withdrawals protoreflect.FieldDescriptor
	fd_Bridge_proposals          protoreflect.FieldDescriptor
	fd_Bridge_batch_infos        protoreflect.FieldDescriptor
)

func init() {
	file_opinit_ophost_v1_genesis_proto_init()
	md_Bridge = File_opinit_ophost_v1_genesis_proto.Messages().ByName("Bridge")
	fd_Bridge_bridge_id = md_Bridge.Fields().ByName("bridge_id")
	fd_Bridge_next_l1_sequence = md_Bridge.Fields().ByName("next_l1_sequence")
	fd_Bridge_next_output_index = md_Bridge.Fields().ByName("next_output_index")
	fd_Bridge_bridge_config = md_Bridge.Fields().ByName("bridge_config")
	fd_Bridge_token_pairs = md_Bridge.Fields().ByName("token_pairs")
	fd_Bridge_proven_withdrawals = md_Bridge.Fields().ByName("proven_withdrawals")
	fd_Bridge_proposals = md_Bridge.Fields().ByName("proposals")
	fd_Bridge_batch_infos = md_Bridge.Fields().ByName("batch_infos")
}

var _ protoreflect.Message = (*fastReflection_Bridge)(nil)

type fastReflection_Bridge Bridge

func (x *Bridge) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Bridge)(x)
}

func (x *Bridge) slowProtoReflect() protoreflect.Message {
	mi := &file_opinit_ophost_v1_genesis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Bridge_messageType fastReflection_Bridge_messageType
var _ protoreflect.MessageType = fastReflection_Bridge_messageType{}

type fastReflection_Bridge_messageType struct{}

func (x fastReflection_Bridge_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Bridge)(nil)
}
func (x fastReflection_Bridge_messageType) New() protoreflect.Message {
	return new(fastReflection_Bridge)
}
func (x fastReflection_Bridge_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Bridge
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Bridge) Descriptor() protoreflect.MessageDescriptor {
	return md_Bridge
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Bridge) Type() protoreflect.MessageType {
	return _fastReflection_Bridge_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Bridge) New() protoreflect.Message {
	return new(fastReflection_Bridge)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Bridge) Interface() protoreflect.ProtoMessage {
	return (*Bridge)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Bridge) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BridgeId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BridgeId)
		if !f(fd_Bridge_bridge_id, value) {
			return
		}
	}
	if x.NextL1Sequence != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NextL1Sequence)
		if !f(fd_Bridge_next_l1_sequence, value) {
			return
		}
	}
	if x.NextOutputIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.NextOutputIndex)
		if !f(fd_Bridge_next_output_index, value) {
			return
		}
	}
	if x.BridgeConfig != nil {
		value := protoreflect.ValueOfMessage(x.BridgeConfig.ProtoReflect())
		if !f(fd_Bridge_bridge_config, value) {
			return
		}
	}
	if len(x.TokenPairs) != 0 {
		value := protoreflect.ValueOfList(&_Bridge_5_list{list: &x.TokenPairs})
		if !f(fd_Bridge_token_pairs, value) {
			return
		}
	}
	if len(x.ProvenWithdrawals) != 0 {
		value := protoreflect.ValueOfList(&_Bridge_6_list{list: &x.ProvenWithdrawals})
		if !f(fd_Bridge_proven_withdrawals, value) {
			return
		}
	}
	if len(x.Proposals) != 0 {
		value := protoreflect.ValueOfList(&_Bridge_7_list{list: &x.Proposals})
		if !f(fd_Bridge_proposals, value) {
			return
		}
	}
	if len(x.BatchInfos) != 0 {
		value := protoreflect.ValueOfList(&_Bridge_8_list{list: &x.BatchInfos})
		if !f(fd_Bridge_batch_infos, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Bridge) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "opinit.ophost.v1.Bridge.bridge_id":
		return x.BridgeId != uint64(0)
	case "opinit.ophost.v1.Bridge.next_l1_sequence":
		return x.NextL1Sequence != uint64(0)
	case "opinit.ophost.v1.Bridge.next_output_index":
		return x.NextOutputIndex != uint64(0)
	case "opinit.ophost.v1.Bridge.bridge_config":
		return x.BridgeConfig != nil
	case "opinit.ophost.v1.Bridge.token_pairs":
		return len(x.TokenPairs) != 0
	case "opinit.ophost.v1.Bridge.proven_withdrawals":
		return len(x.ProvenWithdrawals) != 0
	case "opinit.ophost.v1.Bridge.proposals":
		return len(x.Proposals) != 0
	case "opinit.ophost.v1.Bridge.batch_infos":
		return len(x.BatchInfos) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.Bridge"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.Bridge does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bridge) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "opinit.ophost.v1.Bridge.bridge_id":
		x.BridgeId = uint64(0)
	case "opinit.ophost.v1.Bridge.next_l1_sequence":
		x.NextL1Sequence = uint64(0)
	case "opinit.ophost.v1.Bridge.next_output_index":
		x.NextOutputIndex = uint64(0)
	case "opinit.ophost.v1.Bridge.bridge_config":
		x.BridgeConfig = nil
	case "opinit.ophost.v1.Bridge.token_pairs":
		x.TokenPairs = nil
	case "opinit.ophost.v1.Bridge.proven_withdrawals":
		x.ProvenWithdrawals = nil
	case "opinit.ophost.v1.Bridge.proposals":
		x.Proposals = nil
	case "opinit.ophost.v1.Bridge.batch_infos":
		x.BatchInfos = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.Bridge"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.Bridge does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Bridge) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "opinit.ophost.v1.Bridge.bridge_id":
		value := x.BridgeId
		return protoreflect.ValueOfUint64(value)
	case "opinit.ophost.v1.Bridge.next_l1_sequence":
		value := x.NextL1Sequence
		return protoreflect.ValueOfUint64(value)
	case "opinit.ophost.v1.Bridge.next_output_index":
		value := x.NextOutputIndex
		return protoreflect.ValueOfUint64(value)
	case "opinit.ophost.v1.Bridge.bridge_config":
		value := x.BridgeConfig
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "opinit.ophost.v1.Bridge.token_pairs":
		if len(x.TokenPairs) == 0 {
			return protoreflect.ValueOfList(&_Bridge_5_list{})
		}
		listValue := &_Bridge_5_list{list: &x.TokenPairs}
		return protoreflect.ValueOfList(listValue)
	case "opinit.ophost.v1.Bridge.proven_withdrawals":
		if len(x.ProvenWithdrawals) == 0 {
			return protoreflect.ValueOfList(&_Bridge_6_list{})
		}
		listValue := &_Bridge_6_list{list: &x.ProvenWithdrawals}
		return protoreflect.ValueOfList(listValue)
	case "opinit.ophost.v1.Bridge.proposals":
		if len(x.Proposals) == 0 {
			return protoreflect.ValueOfList(&_Bridge_7_list{})
		}
		listValue := &_Bridge_7_list{list: &x.Proposals}
		return protoreflect.ValueOfList(listValue)
	case "opinit.ophost.v1.Bridge.batch_infos":
		if len(x.BatchInfos) == 0 {
			return protoreflect.ValueOfList(&_Bridge_8_list{})
		}
		listValue := &_Bridge_8_list{list: &x.BatchInfos}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.Bridge"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.Bridge does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bridge) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "opinit.ophost.v1.Bridge.bridge_id":
		x.BridgeId = value.Uint()
	case "opinit.ophost.v1.Bridge.next_l1_sequence":
		x.NextL1Sequence = value.Uint()
	case "opinit.ophost.v1.Bridge.next_output_index":
		x.NextOutputIndex = value.Uint()
	case "opinit.ophost.v1.Bridge.bridge_config":
		x.BridgeConfig = value.Message().Interface().(*BridgeConfig)
	case "opinit.ophost.v1.Bridge.token_pairs":
		lv := value.List()
		clv := lv.(*_Bridge_5_list)
		x.TokenPairs = *clv.list
	case "opinit.ophost.v1.Bridge.proven_withdrawals":
		lv := value.List()
		clv := lv.(*_Bridge_6_list)
		x.ProvenWithdrawals = *clv.list
	case "opinit.ophost.v1.Bridge.proposals":
		lv := value.List()
		clv := lv.(*_Bridge_7_list)
		x.Proposals = *clv.list
	case "opinit.ophost.v1.Bridge.batch_infos":
		lv := value.List()
		clv := lv.(*_Bridge_8_list)
		x.BatchInfos = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.Bridge"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.Bridge does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bridge) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "opinit.ophost.v1.Bridge.bridge_config":
		if x.BridgeConfig == nil {
			x.BridgeConfig = new(BridgeConfig)
		}
		return protoreflect.ValueOfMessage(x.BridgeConfig.ProtoReflect())
	case "opinit.ophost.v1.Bridge.token_pairs":
		if x.TokenPairs == nil {
			x.TokenPairs = []*TokenPair{}
		}
		value := &_Bridge_5_list{list: &x.TokenPairs}
		return protoreflect.ValueOfList(value)
	case "opinit.ophost.v1.Bridge.proven_withdrawals":
		if x.ProvenWithdrawals == nil {
			x.ProvenWithdrawals = [][]byte{}
		}
		value := &_Bridge_6_list{list: &x.ProvenWithdrawals}
		return protoreflect.ValueOfList(value)
	case "opinit.ophost.v1.Bridge.proposals":
		if x.Proposals == nil {
			x.Proposals = []*WrappedOutput{}
		}
		value := &_Bridge_7_list{list: &x.Proposals}
		return protoreflect.ValueOfList(value)
	case "opinit.ophost.v1.Bridge.batch_infos":
		if x.BatchInfos == nil {
			x.BatchInfos = []*BatchInfoWithOutput{}
		}
		value := &_Bridge_8_list{list: &x.BatchInfos}
		return protoreflect.ValueOfList(value)
	case "opinit.ophost.v1.Bridge.bridge_id":
		panic(fmt.Errorf("field bridge_id of message opinit.ophost.v1.Bridge is not mutable"))
	case "opinit.ophost.v1.Bridge.next_l1_sequence":
		panic(fmt.Errorf("field next_l1_sequence of message opinit.ophost.v1.Bridge is not mutable"))
	case "opinit.ophost.v1.Bridge.next_output_index":
		panic(fmt.Errorf("field next_output_index of message opinit.ophost.v1.Bridge is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.Bridge"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.Bridge does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Bridge) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "opinit.ophost.v1.Bridge.bridge_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "opinit.ophost.v1.Bridge.next_l1_sequence":
		return protoreflect.ValueOfUint64(uint64(0))
	case "opinit.ophost.v1.Bridge.next_output_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "opinit.ophost.v1.Bridge.bridge_config":
		m := new(BridgeConfig)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "opinit.ophost.v1.Bridge.token_pairs":
		list := []*TokenPair{}
		return protoreflect.ValueOfList(&_Bridge_5_list{list: &list})
	case "opinit.ophost.v1.Bridge.proven_withdrawals":
		list := [][]byte{}
		return protoreflect.ValueOfList(&_Bridge_6_list{list: &list})
	case "opinit.ophost.v1.Bridge.proposals":
		list := []*WrappedOutput{}
		return protoreflect.ValueOfList(&_Bridge_7_list{list: &list})
	case "opinit.ophost.v1.Bridge.batch_infos":
		list := []*BatchInfoWithOutput{}
		return protoreflect.ValueOfList(&_Bridge_8_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.Bridge"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.Bridge does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Bridge) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in opinit.ophost.v1.Bridge", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Bridge) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Bridge) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Bridge) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Bridge) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Bridge)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BridgeId != 0 {
			n += 1 + runtime.Sov(uint64(x.BridgeId))
		}
		if x.NextL1Sequence != 0 {
			n += 1 + runtime.Sov(uint64(x.NextL1Sequence))
		}
		if x.NextOutputIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.NextOutputIndex))
		}
		if x.BridgeConfig != nil {
			l = options.Size(x.BridgeConfig)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.TokenPairs) > 0 {
			for _, e := range x.TokenPairs {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.ProvenWithdrawals) > 0 {
			for _, b := range x.ProvenWithdrawals {
				l = len(b)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.Proposals) > 0 {
			for _, e := range x.Proposals {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if len(x.BatchInfos) > 0 {
			for _, e := range x.BatchInfos {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Bridge)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.BatchInfos) > 0 {
			for iNdEx := len(x.BatchInfos) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.BatchInfos[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x42
			}
		}
		if len(x.Proposals) > 0 {
			for iNdEx := len(x.Proposals) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Proposals[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x3a
			}
		}
		if len(x.ProvenWithdrawals) > 0 {
			for iNdEx := len(x.ProvenWithdrawals) - 1; iNdEx >= 0; iNdEx-- {
				i -= len(x.ProvenWithdrawals[iNdEx])
				copy(dAtA[i:], x.ProvenWithdrawals[iNdEx])
				i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ProvenWithdrawals[iNdEx])))
				i--
				dAtA[i] = 0x32
			}
		}
		if len(x.TokenPairs) > 0 {
			for iNdEx := len(x.TokenPairs) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.TokenPairs[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x2a
			}
		}
		if x.BridgeConfig != nil {
			encoded, err := options.Marshal(x.BridgeConfig)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x22
		}
		if x.NextOutputIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NextOutputIndex))
			i--
			dAtA[i] = 0x18
		}
		if x.NextL1Sequence != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.NextL1Sequence))
			i--
			dAtA[i] = 0x10
		}
		if x.BridgeId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BridgeId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Bridge)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Bridge: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Bridge: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BridgeId", wireType)
				}
				x.BridgeId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BridgeId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NextL1Sequence", wireType)
				}
				x.NextL1Sequence = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NextL1Sequence |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field NextOutputIndex", wireType)
				}
				x.NextOutputIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.NextOutputIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BridgeConfig", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BridgeConfig == nil {
					x.BridgeConfig = &BridgeConfig{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BridgeConfig); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TokenPairs", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TokenPairs = append(x.TokenPairs, &TokenPair{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TokenPairs[len(x.TokenPairs)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ProvenWithdrawals", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ProvenWithdrawals = append(x.ProvenWithdrawals, make([]byte, postIndex-iNdEx))
				copy(x.ProvenWithdrawals[len(x.ProvenWithdrawals)-1], dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Proposals = append(x.Proposals, &WrappedOutput{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Proposals[len(x.Proposals)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BatchInfos", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BatchInfos = append(x.BatchInfos, &BatchInfoWithOutput{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BatchInfos[len(x.BatchInfos)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_WrappedOutput                 protoreflect.MessageDescriptor
	fd_WrappedOutput_output_index    protoreflect.FieldDescriptor
	fd_WrappedOutput_output_proposal protoreflect.FieldDescriptor
)

func init() {
	file_opinit_ophost_v1_genesis_proto_init()
	md_WrappedOutput = File_opinit_ophost_v1_genesis_proto.Messages().ByName("WrappedOutput")
	fd_WrappedOutput_output_index = md_WrappedOutput.Fields().ByName("output_index")
	fd_WrappedOutput_output_proposal = md_WrappedOutput.Fields().ByName("output_proposal")
}

var _ protoreflect.Message = (*fastReflection_WrappedOutput)(nil)

type fastReflection_WrappedOutput WrappedOutput

func (x *WrappedOutput) ProtoReflect() protoreflect.Message {
	return (*fastReflection_WrappedOutput)(x)
}

func (x *WrappedOutput) slowProtoReflect() protoreflect.Message {
	mi := &file_opinit_ophost_v1_genesis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_WrappedOutput_messageType fastReflection_WrappedOutput_messageType
var _ protoreflect.MessageType = fastReflection_WrappedOutput_messageType{}

type fastReflection_WrappedOutput_messageType struct{}

func (x fastReflection_WrappedOutput_messageType) Zero() protoreflect.Message {
	return (*fastReflection_WrappedOutput)(nil)
}
func (x fastReflection_WrappedOutput_messageType) New() protoreflect.Message {
	return new(fastReflection_WrappedOutput)
}
func (x fastReflection_WrappedOutput_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_WrappedOutput
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_WrappedOutput) Descriptor() protoreflect.MessageDescriptor {
	return md_WrappedOutput
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_WrappedOutput) Type() protoreflect.MessageType {
	return _fastReflection_WrappedOutput_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_WrappedOutput) New() protoreflect.Message {
	return new(fastReflection_WrappedOutput)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_WrappedOutput) Interface() protoreflect.ProtoMessage {
	return (*WrappedOutput)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_WrappedOutput) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.OutputIndex != uint64(0) {
		value := protoreflect.ValueOfUint64(x.OutputIndex)
		if !f(fd_WrappedOutput_output_index, value) {
			return
		}
	}
	if x.OutputProposal != nil {
		value := protoreflect.ValueOfMessage(x.OutputProposal.ProtoReflect())
		if !f(fd_WrappedOutput_output_proposal, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_WrappedOutput) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "opinit.ophost.v1.WrappedOutput.output_index":
		return x.OutputIndex != uint64(0)
	case "opinit.ophost.v1.WrappedOutput.output_proposal":
		return x.OutputProposal != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.WrappedOutput"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.WrappedOutput does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WrappedOutput) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "opinit.ophost.v1.WrappedOutput.output_index":
		x.OutputIndex = uint64(0)
	case "opinit.ophost.v1.WrappedOutput.output_proposal":
		x.OutputProposal = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.WrappedOutput"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.WrappedOutput does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_WrappedOutput) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "opinit.ophost.v1.WrappedOutput.output_index":
		value := x.OutputIndex
		return protoreflect.ValueOfUint64(value)
	case "opinit.ophost.v1.WrappedOutput.output_proposal":
		value := x.OutputProposal
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.WrappedOutput"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.WrappedOutput does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WrappedOutput) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "opinit.ophost.v1.WrappedOutput.output_index":
		x.OutputIndex = value.Uint()
	case "opinit.ophost.v1.WrappedOutput.output_proposal":
		x.OutputProposal = value.Message().Interface().(*Output)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.WrappedOutput"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.WrappedOutput does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WrappedOutput) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "opinit.ophost.v1.WrappedOutput.output_proposal":
		if x.OutputProposal == nil {
			x.OutputProposal = new(Output)
		}
		return protoreflect.ValueOfMessage(x.OutputProposal.ProtoReflect())
	case "opinit.ophost.v1.WrappedOutput.output_index":
		panic(fmt.Errorf("field output_index of message opinit.ophost.v1.WrappedOutput is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.WrappedOutput"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.WrappedOutput does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_WrappedOutput) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "opinit.ophost.v1.WrappedOutput.output_index":
		return protoreflect.ValueOfUint64(uint64(0))
	case "opinit.ophost.v1.WrappedOutput.output_proposal":
		m := new(Output)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: opinit.ophost.v1.WrappedOutput"))
		}
		panic(fmt.Errorf("message opinit.ophost.v1.WrappedOutput does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_WrappedOutput) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in opinit.ophost.v1.WrappedOutput", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_WrappedOutput) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_WrappedOutput) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_WrappedOutput) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_WrappedOutput) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*WrappedOutput)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.OutputIndex != 0 {
			n += 1 + runtime.Sov(uint64(x.OutputIndex))
		}
		if x.OutputProposal != nil {
			l = options.Size(x.OutputProposal)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*WrappedOutput)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.OutputProposal != nil {
			encoded, err := options.Marshal(x.OutputProposal)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.OutputIndex != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.OutputIndex))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*WrappedOutput)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WrappedOutput: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: WrappedOutput: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutputIndex", wireType)
				}
				x.OutputIndex = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.OutputIndex |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field OutputProposal", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.OutputProposal == nil {
					x.OutputProposal = &Output{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.OutputProposal); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: opinit/ophost/v1/genesis.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenesisState defines the rollup module's genesis state.
type GenesisState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// params defines all the parameters of related to deposit.
	Params *Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// bridges defines the registered bridges.
	Bridges []*Bridge `protobuf:"bytes,2,rep,name=bridges,proto3" json:"bridges,omitempty"`
	// the id will be asisgned to a new bridge.
	NextBridgeId uint64 `protobuf:"varint,3,opt,name=next_bridge_id,json=nextBridgeId,proto3" json:"next_bridge_id,omitempty"`
}

func (x *GenesisState) Reset() {
	*x = GenesisState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opinit_ophost_v1_genesis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisState) ProtoMessage() {}

// Deprecated: Use GenesisState.ProtoReflect.Descriptor instead.
func (*GenesisState) Descriptor() ([]byte, []int) {
	return file_opinit_ophost_v1_genesis_proto_rawDescGZIP(), []int{0}
}

func (x *GenesisState) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GenesisState) GetBridges() []*Bridge {
	if x != nil {
		return x.Bridges
	}
	return nil
}

func (x *GenesisState) GetNextBridgeId() uint64 {
	if x != nil {
		return x.NextBridgeId
	}
	return 0
}

// Bridge defeins a bridge state.
type Bridge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeId uint64 `protobuf:"varint,1,opt,name=bridge_id,json=bridgeId,proto3" json:"bridge_id,omitempty"`
	// l1 sequence number.
	NextL1Sequence uint64 `protobuf:"varint,2,opt,name=next_l1_sequence,json=nextL1Sequence,proto3" json:"next_l1_sequence,omitempty"`
	// next output index.
	NextOutputIndex uint64 `protobuf:"varint,3,opt,name=next_output_index,json=nextOutputIndex,proto3" json:"next_output_index,omitempty"`
	// a bridge config.
	BridgeConfig *BridgeConfig `protobuf:"bytes,4,opt,name=bridge_config,json=bridgeConfig,proto3" json:"bridge_config,omitempty"`
	// a list of (l1, l2) token pairs
	TokenPairs []*TokenPair `protobuf:"bytes,5,rep,name=token_pairs,json=tokenPairs,proto3" json:"token_pairs,omitempty"`
	// a list of l2 output proposals, which has been proven.
	ProvenWithdrawals [][]byte `protobuf:"bytes,6,rep,name=proven_withdrawals,json=provenWithdrawals,proto3" json:"proven_withdrawals,omitempty"`
	// a list of l2 output proposals.
	Proposals []*WrappedOutput `protobuf:"bytes,7,rep,name=proposals,proto3" json:"proposals,omitempty"`
	// a list of batch infos.
	BatchInfos []*BatchInfoWithOutput `protobuf:"bytes,8,rep,name=batch_infos,json=batchInfos,proto3" json:"batch_infos,omitempty"`
}

func (x *Bridge) Reset() {
	*x = Bridge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opinit_ophost_v1_genesis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bridge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bridge) ProtoMessage() {}

// Deprecated: Use Bridge.ProtoReflect.Descriptor instead.
func (*Bridge) Descriptor() ([]byte, []int) {
	return file_opinit_ophost_v1_genesis_proto_rawDescGZIP(), []int{1}
}

func (x *Bridge) GetBridgeId() uint64 {
	if x != nil {
		return x.BridgeId
	}
	return 0
}

func (x *Bridge) GetNextL1Sequence() uint64 {
	if x != nil {
		return x.NextL1Sequence
	}
	return 0
}

func (x *Bridge) GetNextOutputIndex() uint64 {
	if x != nil {
		return x.NextOutputIndex
	}
	return 0
}

func (x *Bridge) GetBridgeConfig() *BridgeConfig {
	if x != nil {
		return x.BridgeConfig
	}
	return nil
}

func (x *Bridge) GetTokenPairs() []*TokenPair {
	if x != nil {
		return x.TokenPairs
	}
	return nil
}

func (x *Bridge) GetProvenWithdrawals() [][]byte {
	if x != nil {
		return x.ProvenWithdrawals
	}
	return nil
}

func (x *Bridge) GetProposals() []*WrappedOutput {
	if x != nil {
		return x.Proposals
	}
	return nil
}

func (x *Bridge) GetBatchInfos() []*BatchInfoWithOutput {
	if x != nil {
		return x.BatchInfos
	}
	return nil
}

// WrappedOutput defines a wrapped output containing its index and proposal.
type WrappedOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutputIndex    uint64  `protobuf:"varint,1,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	OutputProposal *Output `protobuf:"bytes,2,opt,name=output_proposal,json=outputProposal,proto3" json:"output_proposal,omitempty"`
}

func (x *WrappedOutput) Reset() {
	*x = WrappedOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_opinit_ophost_v1_genesis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrappedOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrappedOutput) ProtoMessage() {}

// Deprecated: Use WrappedOutput.ProtoReflect.Descriptor instead.
func (*WrappedOutput) Descriptor() ([]byte, []int) {
	return file_opinit_ophost_v1_genesis_proto_rawDescGZIP(), []int{2}
}

func (x *WrappedOutput) GetOutputIndex() uint64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *WrappedOutput) GetOutputProposal() *Output {
	if x != nil {
		return x.OutputProposal
	}
	return nil
}

var File_opinit_ophost_v1_genesis_proto protoreflect.FileDescriptor

var file_opinit_ophost_v1_genesis_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x2f, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x2e, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x6f, 0x70, 0x69,
	0x6e, 0x69, 0x74, 0x2f, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x69,
	0x6e, 0x69, 0x74, 0x2e, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x69,
	0x74, 0x2e, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x07, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x6e, 0x65, 0x78, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x64, 0x22, 0xe0, 0x03, 0x0a,
	0x06, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x69, 0x64, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x31, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x4c, 0x31, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4e, 0x0a, 0x0d, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x2e, 0x6f, 0x70, 0x68, 0x6f, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0c, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x2e, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x42, 0x09, 0xc8, 0xde,
	0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x61,
	0x69, 0x72, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x11, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x2e, 0x6f,
	0x70, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0, 0x2a,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x51, 0x0a, 0x0b,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x2e, 0x6f, 0x70, 0x68, 0x6f, 0x73,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x80, 0x01, 0x0a, 0x0d, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x2e, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x09, 0xc8, 0xde, 0x1f, 0x00, 0xa8, 0xe7, 0xb0,
	0x2a, 0x01, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x42, 0xc3, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x70, 0x69, 0x6e, 0x69,
	0x74, 0x2e, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x2d, 0x6c,
	0x61, 0x62, 0x73, 0x2f, 0x4f, 0x50, 0x69, 0x6e, 0x69, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f,
	0x70, 0x69, 0x6e, 0x69, 0x74, 0x2f, 0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b,
	0x6f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4f, 0x4f, 0x58, 0xaa, 0x02,
	0x10, 0x4f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x2e, 0x4f, 0x70, 0x68, 0x6f, 0x73, 0x74, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x10, 0x4f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x5c, 0x4f, 0x70, 0x68, 0x6f, 0x73,
	0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x4f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x5c, 0x4f, 0x70,
	0x68, 0x6f, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x4f, 0x70, 0x69, 0x6e, 0x69, 0x74, 0x3a, 0x3a, 0x4f, 0x70,
	0x68, 0x6f, 0x73, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opinit_ophost_v1_genesis_proto_rawDescOnce sync.Once
	file_opinit_ophost_v1_genesis_proto_rawDescData = file_opinit_ophost_v1_genesis_proto_rawDesc
)

func file_opinit_ophost_v1_genesis_proto_rawDescGZIP() []byte {
	file_opinit_ophost_v1_genesis_proto_rawDescOnce.Do(func() {
		file_opinit_ophost_v1_genesis_proto_rawDescData = protoimpl.X.CompressGZIP(file_opinit_ophost_v1_genesis_proto_rawDescData)
	})
	return file_opinit_ophost_v1_genesis_proto_rawDescData
}

var file_opinit_ophost_v1_genesis_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_opinit_ophost_v1_genesis_proto_goTypes = []interface{}{
	(*GenesisState)(nil),        // 0: opinit.ophost.v1.GenesisState
	(*Bridge)(nil),              // 1: opinit.ophost.v1.Bridge
	(*WrappedOutput)(nil),       // 2: opinit.ophost.v1.WrappedOutput
	(*Params)(nil),              // 3: opinit.ophost.v1.Params
	(*BridgeConfig)(nil),        // 4: opinit.ophost.v1.BridgeConfig
	(*TokenPair)(nil),           // 5: opinit.ophost.v1.TokenPair
	(*BatchInfoWithOutput)(nil), // 6: opinit.ophost.v1.BatchInfoWithOutput
	(*Output)(nil),              // 7: opinit.ophost.v1.Output
}
var file_opinit_ophost_v1_genesis_proto_depIdxs = []int32{
	3, // 0: opinit.ophost.v1.GenesisState.params:type_name -> opinit.ophost.v1.Params
	1, // 1: opinit.ophost.v1.GenesisState.bridges:type_name -> opinit.ophost.v1.Bridge
	4, // 2: opinit.ophost.v1.Bridge.bridge_config:type_name -> opinit.ophost.v1.BridgeConfig
	5, // 3: opinit.ophost.v1.Bridge.token_pairs:type_name -> opinit.ophost.v1.TokenPair
	2, // 4: opinit.ophost.v1.Bridge.proposals:type_name -> opinit.ophost.v1.WrappedOutput
	6, // 5: opinit.ophost.v1.Bridge.batch_infos:type_name -> opinit.ophost.v1.BatchInfoWithOutput
	7, // 6: opinit.ophost.v1.WrappedOutput.output_proposal:type_name -> opinit.ophost.v1.Output
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_opinit_ophost_v1_genesis_proto_init() }
func file_opinit_ophost_v1_genesis_proto_init() {
	if File_opinit_ophost_v1_genesis_proto != nil {
		return
	}
	file_opinit_ophost_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_opinit_ophost_v1_genesis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opinit_ophost_v1_genesis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bridge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_opinit_ophost_v1_genesis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrappedOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opinit_ophost_v1_genesis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opinit_ophost_v1_genesis_proto_goTypes,
		DependencyIndexes: file_opinit_ophost_v1_genesis_proto_depIdxs,
		MessageInfos:      file_opinit_ophost_v1_genesis_proto_msgTypes,
	}.Build()
	File_opinit_ophost_v1_genesis_proto = out.File
	file_opinit_ophost_v1_genesis_proto_rawDesc = nil
	file_opinit_ophost_v1_genesis_proto_goTypes = nil
	file_opinit_ophost_v1_genesis_proto_depIdxs = nil
}
