// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: opinit/ophost/v1/query.proto

package ophostv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Bridge_FullMethodName              = "/opinit.ophost.v1.Query/Bridge"
	Query_Bridges_FullMethodName             = "/opinit.ophost.v1.Query/Bridges"
	Query_TokenPairByL1Denom_FullMethodName  = "/opinit.ophost.v1.Query/TokenPairByL1Denom"
	Query_TokenPairByL2Denom_FullMethodName  = "/opinit.ophost.v1.Query/TokenPairByL2Denom"
	Query_TokenPairs_FullMethodName          = "/opinit.ophost.v1.Query/TokenPairs"
	Query_LastFinalizedOutput_FullMethodName = "/opinit.ophost.v1.Query/LastFinalizedOutput"
	Query_OutputProposal_FullMethodName      = "/opinit.ophost.v1.Query/OutputProposal"
	Query_OutputProposals_FullMethodName     = "/opinit.ophost.v1.Query/OutputProposals"
	Query_Params_FullMethodName              = "/opinit.ophost.v1.Query/Params"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Bridge queries bridge info.
	Bridge(ctx context.Context, in *QueryBridgeRequest, opts ...grpc.CallOption) (*QueryBridgeResponse, error)
	// Bridges queries bridge infos.
	Bridges(ctx context.Context, in *QueryBridgesRequest, opts ...grpc.CallOption) (*QueryBridgesResponse, error)
	// TokenPairByL1Denom queries token pair by l1 denom.
	TokenPairByL1Denom(ctx context.Context, in *QueryTokenPairByL1DenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByL1DenomResponse, error)
	// TokenPairByL2Denom queries token pair by l2 denom.
	TokenPairByL2Denom(ctx context.Context, in *QueryTokenPairByL2DenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByL2DenomResponse, error)
	// TokenPairs queries all (l1 denom, l2 denom) pair.
	TokenPairs(ctx context.Context, in *QueryTokenPairsRequest, opts ...grpc.CallOption) (*QueryTokenPairsResponse, error)
	LastFinalizedOutput(ctx context.Context, in *QueryLastFinalizedOutputRequest, opts ...grpc.CallOption) (*QueryLastFinalizedOutputResponse, error)
	// OutputProposal queries output proposal by output index.
	OutputProposal(ctx context.Context, in *QueryOutputProposalRequest, opts ...grpc.CallOption) (*QueryOutputProposalResponse, error)
	// OutputProposals queries all output proposals.
	OutputProposals(ctx context.Context, in *QueryOutputProposalsRequest, opts ...grpc.CallOption) (*QueryOutputProposalsResponse, error)
	// Parameters queries the rollup parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Bridge(ctx context.Context, in *QueryBridgeRequest, opts ...grpc.CallOption) (*QueryBridgeResponse, error) {
	out := new(QueryBridgeResponse)
	err := c.cc.Invoke(ctx, Query_Bridge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bridges(ctx context.Context, in *QueryBridgesRequest, opts ...grpc.CallOption) (*QueryBridgesResponse, error) {
	out := new(QueryBridgesResponse)
	err := c.cc.Invoke(ctx, Query_Bridges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairByL1Denom(ctx context.Context, in *QueryTokenPairByL1DenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByL1DenomResponse, error) {
	out := new(QueryTokenPairByL1DenomResponse)
	err := c.cc.Invoke(ctx, Query_TokenPairByL1Denom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairByL2Denom(ctx context.Context, in *QueryTokenPairByL2DenomRequest, opts ...grpc.CallOption) (*QueryTokenPairByL2DenomResponse, error) {
	out := new(QueryTokenPairByL2DenomResponse)
	err := c.cc.Invoke(ctx, Query_TokenPairByL2Denom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairs(ctx context.Context, in *QueryTokenPairsRequest, opts ...grpc.CallOption) (*QueryTokenPairsResponse, error) {
	out := new(QueryTokenPairsResponse)
	err := c.cc.Invoke(ctx, Query_TokenPairs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastFinalizedOutput(ctx context.Context, in *QueryLastFinalizedOutputRequest, opts ...grpc.CallOption) (*QueryLastFinalizedOutputResponse, error) {
	out := new(QueryLastFinalizedOutputResponse)
	err := c.cc.Invoke(ctx, Query_LastFinalizedOutput_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutputProposal(ctx context.Context, in *QueryOutputProposalRequest, opts ...grpc.CallOption) (*QueryOutputProposalResponse, error) {
	out := new(QueryOutputProposalResponse)
	err := c.cc.Invoke(ctx, Query_OutputProposal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutputProposals(ctx context.Context, in *QueryOutputProposalsRequest, opts ...grpc.CallOption) (*QueryOutputProposalsResponse, error) {
	out := new(QueryOutputProposalsResponse)
	err := c.cc.Invoke(ctx, Query_OutputProposals_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Bridge queries bridge info.
	Bridge(context.Context, *QueryBridgeRequest) (*QueryBridgeResponse, error)
	// Bridges queries bridge infos.
	Bridges(context.Context, *QueryBridgesRequest) (*QueryBridgesResponse, error)
	// TokenPairByL1Denom queries token pair by l1 denom.
	TokenPairByL1Denom(context.Context, *QueryTokenPairByL1DenomRequest) (*QueryTokenPairByL1DenomResponse, error)
	// TokenPairByL2Denom queries token pair by l2 denom.
	TokenPairByL2Denom(context.Context, *QueryTokenPairByL2DenomRequest) (*QueryTokenPairByL2DenomResponse, error)
	// TokenPairs queries all (l1 denom, l2 denom) pair.
	TokenPairs(context.Context, *QueryTokenPairsRequest) (*QueryTokenPairsResponse, error)
	LastFinalizedOutput(context.Context, *QueryLastFinalizedOutputRequest) (*QueryLastFinalizedOutputResponse, error)
	// OutputProposal queries output proposal by output index.
	OutputProposal(context.Context, *QueryOutputProposalRequest) (*QueryOutputProposalResponse, error)
	// OutputProposals queries all output proposals.
	OutputProposals(context.Context, *QueryOutputProposalsRequest) (*QueryOutputProposalsResponse, error)
	// Parameters queries the rollup parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Bridge(context.Context, *QueryBridgeRequest) (*QueryBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bridge not implemented")
}
func (UnimplementedQueryServer) Bridges(context.Context, *QueryBridgesRequest) (*QueryBridgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bridges not implemented")
}
func (UnimplementedQueryServer) TokenPairByL1Denom(context.Context, *QueryTokenPairByL1DenomRequest) (*QueryTokenPairByL1DenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairByL1Denom not implemented")
}
func (UnimplementedQueryServer) TokenPairByL2Denom(context.Context, *QueryTokenPairByL2DenomRequest) (*QueryTokenPairByL2DenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairByL2Denom not implemented")
}
func (UnimplementedQueryServer) TokenPairs(context.Context, *QueryTokenPairsRequest) (*QueryTokenPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairs not implemented")
}
func (UnimplementedQueryServer) LastFinalizedOutput(context.Context, *QueryLastFinalizedOutputRequest) (*QueryLastFinalizedOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastFinalizedOutput not implemented")
}
func (UnimplementedQueryServer) OutputProposal(context.Context, *QueryOutputProposalRequest) (*QueryOutputProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputProposal not implemented")
}
func (UnimplementedQueryServer) OutputProposals(context.Context, *QueryOutputProposalsRequest) (*QueryOutputProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutputProposals not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Bridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Bridge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bridge(ctx, req.(*QueryBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bridges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBridgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bridges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Bridges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bridges(ctx, req.(*QueryBridgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairByL1Denom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPairByL1DenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairByL1Denom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenPairByL1Denom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairByL1Denom(ctx, req.(*QueryTokenPairByL1DenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairByL2Denom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPairByL2DenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairByL2Denom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenPairByL2Denom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairByL2Denom(ctx, req.(*QueryTokenPairByL2DenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TokenPairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairs(ctx, req.(*QueryTokenPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastFinalizedOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastFinalizedOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastFinalizedOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastFinalizedOutput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastFinalizedOutput(ctx, req.(*QueryLastFinalizedOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutputProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutputProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutputProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutputProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutputProposal(ctx, req.(*QueryOutputProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutputProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutputProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutputProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OutputProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutputProposals(ctx, req.(*QueryOutputProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "opinit.ophost.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bridge",
			Handler:    _Query_Bridge_Handler,
		},
		{
			MethodName: "Bridges",
			Handler:    _Query_Bridges_Handler,
		},
		{
			MethodName: "TokenPairByL1Denom",
			Handler:    _Query_TokenPairByL1Denom_Handler,
		},
		{
			MethodName: "TokenPairByL2Denom",
			Handler:    _Query_TokenPairByL2Denom_Handler,
		},
		{
			MethodName: "TokenPairs",
			Handler:    _Query_TokenPairs_Handler,
		},
		{
			MethodName: "LastFinalizedOutput",
			Handler:    _Query_LastFinalizedOutput_Handler,
		},
		{
			MethodName: "OutputProposal",
			Handler:    _Query_OutputProposal_Handler,
		},
		{
			MethodName: "OutputProposals",
			Handler:    _Query_OutputProposals_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opinit/ophost/v1/query.proto",
}
